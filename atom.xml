<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pot Of Code</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://potofcode.com/"/>
  <updated>2017-03-29T11:49:39.890Z</updated>
  <id>https://potofcode.com/</id>
  
  <author>
    <name>Ivan 3axap4eHko Zaharchenko</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Впечатления после года проживания в США. Часть 2 - Жизнь в США</title>
    <link href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/"/>
    <id>https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/</id>
    <published>2017-03-26T19:17:43.000Z</published>
    <updated>2017-03-29T11:49:39.890Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>В <a href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/">предыдущем посте</a> я рассказал о своем первом впечатлении о США.
Здесь я продолжу рассказывать о США и постараюсь осветить большинство граней жизни в этой стране и развею некоторые мифы.</p>
<a id="more"></a>
<p>Как только я приехал в <del>Индиажоп</del> Индианаполис, я отправился в отель, который для меня заранее забронировал на месяц мой работодатель.
Что означало, что мне через месяц придется найти себе жилье, но в силу того, что я люблю решать проблемы по мере их поступления,
я начал решать эту проблему только через 2 недели.</p>
<p>Сразу оговорюсь, что после Нью-Йорка, инфраструктура Индианаполиса - полный отстой.
Автобусы в даунтаун (центр города) от отеля ездят каждые полчаса - это при том, что за пол часа можно дойти туда.
В общем мы (я и жена) прозвали Индианаполис “жопой мира” =)</p>
<hr>
<h4 id="Жилье-и-транспорт"><a href="#Жилье-и-транспорт" class="headerlink" title="Жилье и транспорт"></a>Жилье и транспорт</h4><p>Найти жилье в США не трудно, его полно по разным ценам.
Существует множество сайтов и сервисов поиска жилья, я пользовался <a href="https://www.apartments.com/" target="_blank" rel="external">https://www.apartments.com/</a>
Очень удобно, когда ищешь жилье с учетом времени пути на работу, учитывает как общественный транспорт, так и пешком.</p>
<p>Цены на жилье, как и везде, зависят, как от штата, так и от района и транспотрного сообщения, если в даунтауне Индианаполиса можно снять односпальную квартиру
(в США квартиры идут не по комнатам, а по спальням) за $1500 в месяц, при этом ты вносишь security deposit
(страховой залог, который тебе вернут при выселении, если ты ничго не сломаешь) в размере месячного платежа,
т.е. суммарно первый платеж выходит $3000, то в даунтауне Бруклина (штат Нью-Йорк), $3000 это будет меячный платеж студии (однушки)
и страховой залог берут 2 месячных платежа и того $9000. Поэтому люди частенько снимают жилье в Нью-Джерси и едут на работу в Нью-Йорк.
Такой путь на работу занимает около часа. Причем жилье в США сдают минимум на пол года и то не везде и если вы решите съехать зарание, то заплатите пеню.</p>
<p>В целом я нашел себе отличное односпальное жилье в даунтауне Индианаполиса за $1300 в месяц, где отдельно оплачивается электричество и интернет (+100$).
На работу 15 минут хотьбы, что и быстро и полезно =)</p>
<p>При этом, в здании находились 2 спортзала, открытый бассейн с подогревом, поле для минигольфа, комьюнити рум (что-то типа комната для вечеринок) и бесплатный кофе круглосуточно.
А раз в месяц, устраивали блинный день, приглашая повара и бесплатно угощали блинами на общей кухне.
Квартира идет с укомплектованной кухней (холодильник, шкафчики, микроволновка, плита, посудомойка) и ванной, но без мебели.</p>
<div class="row">
  <div class="col-xs-6 col-md-4">
    Минигольф<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_golf.jpg" data-lightbox="artistry" data-title="Минигольф"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_golf_thmb.jpg" alt="Минигольф"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Бассейн<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_pool.jpg" data-lightbox="artistry" data-title="Бассейн"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_pool_thmb.jpg" alt="Бассейн"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Спортзал<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_gym.jpg" data-lightbox="artistry" data-title="Спортзал"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_gym_thmb.jpg" alt="Спортзал"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Общая кухня<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_coffee.jpg" data-lightbox="artistry" data-title="Общая кухня"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_coffee_thmb.jpg" alt="Общая кухня"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Кухня в квартире<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_kitchen.jpg" data-lightbox="artistry" data-title="Кухня в квартире"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_kitchen_thmb.jpg" alt="Кухня в квартире"></a>
  </div>
</div>

<p>В общем, если вы вдруг поедете в Индианаполис, я рекомендую остановиться в Artistry.
Добраться к семье Нью-Йорк можно было лишь автобусом за 25 часов либо самолетом за 2.5 с одной пересадкой.
Так что с большим багажом или когда есть время, можно и автобусом.</p>
<p>Здесь мы здорово провели время и встретили Новый 2016 год в карете =)</p>
<div class="row">
  <div class="col-xs-6 col-md-4">
    Карета<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_christmass_1.jpg" data-lightbox="christmass" data-title="Карета"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_christmass_1_thmb.jpg" alt="Карета"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Извозчик<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_christmass_3.jpg" data-lightbox="christmass" data-title="Извозчик"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_christmass_3_thmb.jpg" alt="Извозчик"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Рождество<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_christmass_2.jpg" data-lightbox="christmass" data-title="Рождество"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/indy_christmass_2_thmb.jpg" alt="Рождество"></a>
  </div>
</div>

<p>Позже я переехал в Бостон и работал в State Street Bank. Жилье в Бостоне также очень дорогое как и в Нью-Йорке.
Простенький отель стоил $4000 в месяц, к счастью не я платил =) И я нашел себе жилье через AirBnB.
Скажу честно, с первой попытки не вышло.</p>
<p>Жил летом у одного китайца, на самом верхнем этаже со сломанным кондиционером, а еще по крыше ночью кто-то ползал, жесть как вспомню =)
В общем за месяц, не менялось ни постельное, ни кондиционер не починил.
Хотя в описании жилья было указано постельное белье, полотенца, шампуни, кондиционер и кухня.
Пришлось сменить и нашел дом с семьей из Бразилии, тут уж я выдохнул.
Влажная уборка, новое постельное, в общем все как надо.
Так что даже AirBnB не гарантия того, что вам повезет. И старайтесь не селиться на верхних этажах в штатах с жарким климатом.</p>
<p>С транспортом намного лучше, есть автобусы и метро.
Пользовался в основном Uber’ом.</p>
<p>До Нью-Йорка ездил на поезде, 4 часа комфортнейшего пути на Amtrak с вагоном-рестораном, розеткой для ноута, столиком и бесплатной вайфайкой от $99 в обе стороны.
На новый год, Amtrak даже карточку Amtrak Club подарили, как частому клиенту =) с доступом в private ложе.</p>
<p>В целом, личный транспорт в Нью-Йорке не очень то и нужен, да и с парковкой в некоторых районах беда, а цена может быть и по $40-$50 в час.
К слову если вы машину арендуете, то в месяц от $500 платите за аренду вместе со страховкой и бензином.
Проще пользоваться Uber, Lyft или такси на крайняк (которое в 2 раза дороже выходит иногда) если нужно куда-то, куда не добраться ни автобусом ни метро.</p>
<p>Метро и автобусы в Нью-Йорке очень хорошо покрывают все “Большое Яблоко”. Существуют 3 вида оплаты за проезд:</p>
<ul>
<li>Metro Card - обычная карта с магнитной лентой для прохода в автобус или через турникет, пополняется на время (7/30 дней) или на определенную сумму</li>
<li>У оператора автобуса - бросаете монетки или бумажные купюры в специальный автомат в автобусе</li>
<li>Билеты - для некоторых автобусов по Манхэттану, покупается в автоматах. Это редко где, но будьте внимательны, можно попасть на штраф =)</li>
</ul>
<p>В автобус все заходят только в переднюю дверь, а выходят из всех. Причем оператор автобуса никуда не торопиться, всегда вежливый, всегда подождет (сам в шоке после РБ).</p>
<hr>
<h4 id="Еда-одежда-магазины"><a href="#Еда-одежда-магазины" class="headerlink" title="Еда, одежда, магазины"></a>Еда, одежда, магазины</h4><p>С едой все просто, хотите русской кухни, езжайте в русский район. Здесь продают все, от гречки до блинов и драников.
Но заехав на Брайтон, будьте готовы к тому, что вы будто попадаете в СССР, со всеми накрашенными продавщицами, со стандартным вопросом: “Чего тебе?”
Теперь это вызывает улыбку конечно =)</p>
<div class="row">
  <div class="col-xs-6 col-md-6">
    Внимание! Болит голова<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/food_1.jpg" data-lightbox="food" data-title="Внимание! Болит голова"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/food_1_thmb.jpg" alt="Внимание! Болит голова"></a>
  </div>
  <div class="col-xs-6 col-md-6">
    Катлетки<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/food_2.jpg" data-lightbox="food" data-title="Катлетки"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/food_2_thmb.jpg" alt="Катлетки"></a>
  </div>
</div>

<p>Так что в кулинарии ни в чем себе не отказываю.
Вот с овощами тут немного иначе. Есть такое понятие как органические (Organic) овощи, т.е. вырощенные без химии.
Понятное дело, что такие овощи продаются дороже чем обычные (обычные т.е. на химии), но они и вкуснее.
Если обычный огурец стоит $0.99 то органик $3, т.е. цена различается в несколько раз и как минимум в два раза и вкус таких овощей различается так же.
Так что, если кто говорит, что тут невкусные овощи, то он просто нищеброд, который питается либо не органиком, либо утилизацией с овощной базы.
И то и другое на вкус отвратительно. Как-то купил себе пакет винограда за $2, в котором виноградины размером со сливу о_О - так его и выбросили через неделю ибо есть невозможно.
А вот с фруктами тут попроще, манго, цитрусовые, бананы, обычно стоят одинаково и одинаково вкусные, главное берите спелыми =)</p>
<p>Одежду здесь выбирать нужно персонально, синтетика может стоить дороже шелка.
Те кто в теме, просто идут на распродажи каких нибудь Desigual, Armani, D&amp;G и покупают итальянские элитные вещи из натуральных материалов
дешевле даже чем “Свитанак” синтетический стоит. В качестве пруфа смотрите прайс, тайно сфотканный на распродаже ;)</p>
<p>Брендовые кросовки, джинсы и ремени по цене $25, не шутка ли?</p>
<div class="row">
  <div class="col-sm-6 col-md-6">
    Прайс<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/sale_1.jpg" data-lightbox="sale" data-title="Прайс"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/sale_1_thmb.jpg" alt="Прайс"></a>
  </div>
  <div class="col-sm-6 col-md-6">
    Покупки<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/sale_2.jpg" data-lightbox="sale" data-title="Покупки"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/sale_2_thmb.jpg" alt="Покупки"></a>
  </div>
</div>

<p>Ну и вцелом о магазинах.
Апогеем стали аптеки, которые продают, что угодно кроме лекарств.
Аптека это место, где можно купить продукты, бананы, конфеты, молоко, яйца, свежевыпеченный хлеб, батарейки, сделать фото, отправить факс, копию документов и даже оплатить коммунальные услуги о_О
Если вы планируете часто ходить в один и тот же магазин, позаботьтесь о скидочной карте с первого дня, аптеки не исключение.</p>
<hr>
<h4 id="Медицина"><a href="#Медицина" class="headerlink" title="Медицина"></a>Медицина</h4><p>С медициной тут все не так однозначно.
Если вы в стране находитесь легально и у вас есть работа - считайте вы в шоколаде.
Здесь нет плохой работы.
Многие здесь просто гордятся, что они работают медсестрой или сиделкой и даже домой возвращаются в рабочей одежде.</p>
<p>Работодатель вам обязан оплачивать медстраховку, но ни одна медстраховка не покрывает ВСЁ на 100%.
Если вы вызовете скорую медицинскую помощь, бедьте готовы получить счет на оплату срочного вызов медбригады этак $4000
или если у вас перелом, тоже попадете на деньги с плохой медстраховкой.
Так же страховка может не покрывать или покрывать частично лекарства.
В качестве поощрения, работодатели могут предложить покрывать половину того, что не покрыла страховка или другой процент.</p>
<p>При получении медстраховки есть 3 очень важных значения: deductibles, coinsurance and copays.</p>
<ul>
<li>Deductibles - это сумма после которой ваша страховка начинает действовать, т.е. если у вас Deductible $100, а заплатить нужно $90, то медстраховка это НЕ покрывает</li>
<li>Coinsurance - это процент, который покрывает ваш страховой план, после достижения значения Deductible</li>
<li>Copays - это фиксированное значение, которое вы обязаны оплатить из личного кармана в любом случае, независимо покрывает страховка или нет ваш случай</li>
</ul>
<p>Так что ищите страховку с высоким Coinsurance и низкими Deductibles и Copays.</p>
<p>В больнице одинаково обслуживают и малоимущих и богатых.
Только вот малоимущие здесь те, кто получает до $20000 в год. Сюрприз? Для них существуют специальные медстраховки,
которые многое покрывают и конечно покрывается это за счет налогоплательщиков.</p>
<p>Так что, если вы собираетесь здесь работать, первым делом узнайте, что покрывает ваша медстраховка, сколько визитов к дантисту, окулисту и т.д.</p>
<div class="row">
  <div class="col-sm-6 col-md-4">
    На чистке зубов<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/medicine_1.jpg" data-lightbox="medicine" data-title="На чистке зубов"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/medicine_1_thmb.jpg" alt="На чистке зубов"></a>
  </div>
  <div class="col-sm-6 col-md-4">
    Родильная палата<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/medicine_2.jpg" data-lightbox="medicine" data-title="Родильная палата"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/medicine_2_thmb.jpg" alt="Родильная палата"></a>
  </div>
  <div class="col-sm-6 col-md-4">
    Телек в родильной палате<a class="thumbnail" href="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/medicine_3.jpg" data-lightbox="medicine" data-title="Телек в родильной палате"><img src="https://potofcode.com/2017/03/26/travel-usa-first-year-impression-living/medicine_3_thmb.jpg" alt="Телек в родильной палате"></a>
  </div>
</div>

<p>Да и на фото, здесь обычная родильная палата, а не VIP. Персональная комната 5х5 метров, с туалетом, душевой, раковиной и телеком.</p>
<p>Подытожив о медицине, я скажу так, врачи здесь на зарплату не жалуются, да и лечат хорошо, так как много где практикуются частные медклиники,
что значит - конкуренция, что значит - клиенто-ориентированный подход.
Ну и если делать выбор, между медициной в РБ и в США, то тут однозначно можно сказать только то, что в РБ она тоже платная и деньги на нее у вас забирают каждыймесяц.
А теперь посчитайте отношение того, сколько вы уже отдали за медицину в РБ и сколько раз вы ей воспользовались.</p>
<p>Оставляйте свои коментарии, задавайте вопросы и не болейте =)</p>
]]></content>
    
    <summary type="html">
    
      В предыдущем постея рассказал о своем первом впечатлении о США. Здесь я продолжу рассказывать о США и постараюсь осветить большинство граней жизни в этой стране и развею некоторые мифы.
    
    </summary>
    
      <category term="путешествия" scheme="https://potofcode.com/categories/%D0%BF%D1%83%D1%82%D0%B5%D1%88%D0%B5%D1%81%D1%82%D0%B2%D0%B8%D1%8F/"/>
    
    
      <category term="USA" scheme="https://potofcode.com/tags/usa/"/>
    
  </entry>
  
  <entry>
    <title>Впечатления после года проживания в США. Часть 1 - Знакомство</title>
    <link href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/"/>
    <id>https://potofcode.com/2017/03/23/travel-usa-first-year-impression/</id>
    <published>2017-03-24T00:18:23.000Z</published>
    <updated>2017-03-26T19:18:17.078Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>Больше года назад я впервые переехал в эту, без преувеличений, “волшебную” страну.
Глядя на местные обычаи со своей колокольни 30-ти летнего проживания в Беларуси, многое весьма непривычно и вызывает смятение и растеренность.
За это время много всего произошло, что изменило мою жизнь в корне, например, я стал чаще улыбаться =)</p>
<p>И так обо всем по порядку
<a id="more"></a></p>
<blockquote>
<p>Помню я Домодедово, со времен деда мого,
но Шереметьево, круче мать его</p>
<p>КВН</p>
</blockquote>
<p>Когда, после долгих поездок, сборов, переводов и подготовки документов, на руках была рабочая виза (H1B),
я со своей будущей женой купили белеты из Минска в Нью-Йорк аэропорт Кеннеди с одной пересадкой в Шереметьево.
Перелет занял очень много времени, что-то около 15-20 часов, но тем не менее трансатлантический рейс прошел, или даже пролетел очень быстро и комфортно.
Главное не забывать вставать из кресла и гулять по самолету, а еще лучше поприседать или даже поотжиматься от пола.
От скуки можно даже фильмец посмотреть.</p>
<div class="row">
  <div class="col-xs-6 col-md-4">
    Гренландия<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/flight.jpg" data-lightbox="flight" data-title="Гренландия"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/flight_thmb.jpg" alt="Гренландия"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Кино<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/flight_2.jpg" data-lightbox="flight" data-title="Кино"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/flight_2_thmb.jpg" alt="Кино"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Нью-Йорк свысока<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/flight-new-york.jpg" data-lightbox="flight" data-title="Нью-Йорк свысока"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/flight-new-york_thmb.jpg" alt="Нью-Йорк свысока"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Нью-Йорк Посадка<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/flight-new-york-2.jpg" data-lightbox="flight" data-title="Нью-Йорк Посадка"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/flight-new-york-2_thmb.jpg" alt="Нью-Йорк Посадка"></a>
  </div>
</div>

<p>Моим первым городом в США стал Нью-Йорк.
Я провел там 4 дня, перед началом работы, что бы отдохнуть и перевести время со своей семьей, т.к. работа была в Индианаполисе штат Индиана.
После небольшого отдыха, первым знакомством для меня стало метро.</p>
<div class="row">
  <div class="col-xs-6 col-md-4">
    Метро над землей<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/ny_subway_1.jpg" data-lightbox="subway" data-title="Метро над землей"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/ny_subway_1_thmb.jpg" alt="Метро над землей"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Очень близко к домам<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/ny_subway_2.jpg" data-lightbox="subway" data-title="Очень близко к домам"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/ny_subway_2_thmb.jpg" alt="Очень близко к домам"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Поезд приехал<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/ny_subway_3.jpg" data-lightbox="subway" data-title="Поезд приехал"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/ny_subway_3_thmb.jpg" alt="Поезд приехал"></a>
  </div>
</div>

<p>Наверное многим изветсно, что символом США является статуя свободы и побывать в Нью-Йорке и не увидеть статую свободы,
это все равно, что в Китае не увидеть Великую Китайскую Стену, в Лондоне не увидеть Биг Бэн, а в Париже - Эйфелеву Башню.
Так мы отправились в South Ferry, покататься на пароме.</p>
<div class="row">
<iframe class="col-md-12" height="450" frameborder="0" style="border:0" src="https://www.google.com/maps/embed/v1/view?key=AIzaSyAvNlR0mkWjkJp8Bd5KS9fqaYH-n0DC3l4&center=40.7006005,-74.0129217&zoom=18&maptype=satellite" allowfullscreen>
</iframe>
</div>

<div class="row">
  <div class="col-xs-6 col-md-4">
    Какой-то баклан влез в кадр<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/south_ferry_1.jpg" data-lightbox="south-ferry" data-title="Какой-то баклан влез в кадр"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/south_ferry_1_thmb.jpg" alt="Какой-то баклан влез в кадр"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Паромчик<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/south_ferry_2.jpg" data-lightbox="south-ferry" data-title="Паромчик"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/south_ferry_2_thmb.jpg" alt="Паромчик"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Вид на Манхэттен<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/south_ferry_3.jpg" data-lightbox="south-ferry" data-title="Вид на Манхэттен"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/south_ferry_3_thmb.jpg" alt="Вид на Манхэттен"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Фоточка со статуей<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/south_ferry_4.jpg" data-lightbox="south-ferry" data-title="Фоточка со статуей"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/south_ferry_4_thmb.jpg" alt="Фоточка со статуей"></a>
  </div>
</div>

<p>После недолгого плавания мы отправились гулять по Манхэттану.
Нью-Йорк по-праву заслуживает название “Большое яблоко” (The Big Apple), такой же яркий и сочный, как спелое яблоко.</p>
<p>Достопримечательности всегда окружены толпами туристов и сфоткаться, что бы никто не влез в кадр, практически не реально.
Каждый общественный транспорт оснащен кондиционером.</p>
<p>Оператор автобуса (да-да, не водитель, а оператор) очень вежливый.
Мы приехали на уличную ярмарку, где мне пытались впарить мед.страховку, предложив измерить давление, но увидев 120 на 80, просто пожелали хорошего дня =)
А также мы прокатились на фуникулере вдоль бруклинского моста</p>
<div class="row">
  <div class="col-xs-6 col-md-4">
    Я и Джорж Вашингтон<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_1.jpg" data-lightbox="manhattan" data-title="Я и Джорж Вашингтон"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_1_thmb.jpg" alt="Я и Джорж Вашингтон"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Общественный транспорт<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_2.jpg" data-lightbox="manhattan" data-title="Общественный транспорт"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_2_thmb.jpg" alt="Общественный транспорт"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Измеряем давление<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_3.jpg" data-lightbox="manhattan" data-title="Измеряем давление"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_3_thmb.jpg" alt="Измеряем давление"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Лего магазин<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_4.jpg" data-lightbox="manhattan" data-title="Лего магазин"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_4_thmb.jpg" alt="Лего магазин"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Просто красивый краник<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_5.jpg" data-lightbox="manhattan" data-title="Просто красивый краник"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_5_thmb.jpg" alt="Просто красивый краник"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Даже так<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_6.jpg" data-lightbox="manhattan" data-title="Даже так"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_6_thmb.jpg" alt="Даже так"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    среди небоскребов затерялась Церковь Святого Патрика<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_7.jpg" data-lightbox="manhattan" data-title="среди небоскребов затерялась Церковь Святого Патрика"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_7_thmb.jpg" alt="среди небоскребов затерялась Церковь Святого Патрика"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Фуникулер<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_8.jpg" data-lightbox="manhattan" data-title="Фуникулер"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/manhattan_8_thmb.jpg" alt="Фуникулер"></a>
  </div>
</div>

<p>Так незаметно пролетели 4 дня в Нью-Йорке и пришло время для трудовых будней.
Оставив семью в Нью-Йорке я улетел в Индианаполис на работу и несколько раз в месяц я приезжал на ночном автобусе.</p>
<div class="row">
  <div class="col-xs-6 col-md-4">
    Перелет в Индианаполис<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/indy_1.jpg" data-lightbox="manhattan" data-title="Перелет в Индианаполис"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/indy_1_thmb.jpg" alt="Перелет в Индианаполис"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Дорога в Нью-Йорк<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/indy_2.jpg" data-lightbox="manhattan" data-title="Дорога в Нью-Йорк"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/indy_2_thmb.jpg" alt="Дорога в Нью-Йорк"></a>
  </div>
  <div class="col-xs-6 col-md-4">
    Ночная остановка<a class="thumbnail" href="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/indy_3.jpg" data-lightbox="manhattan" data-title="Ночная остановка"><img src="https://potofcode.com/2017/03/23/travel-usa-first-year-impression/indy_3_thmb.jpg" alt="Ночная остановка"></a>
  </div>
</div>

<p>Одно я скажу уверенно, если вы пытаетесь покинуть зону комфорта, приезжайте в США, здесь ее просто не найти =)
При этом, здесь вам улыбаются и желают доброго утра, абсолютно не знакомые вам люди.
Вместо дежурного привет, здесь дежурно спрашивают как дела.
И не пугайтесь, если к вам на улице подойдет незнакомый человек, просто поговорить, распросить вас о книжке,
которую вы читаете, или сказать вам, что у вас классная футболка - это нормально для США =)</p>
<p>Оставляйте свои коментарии, задавайте вопросы. Если вам понравилась мой очерк, могу написать подробнее о чем-либо еще.</p>
]]></content>
    
    <summary type="html">
    
      Больше года назад я впервые переехал в эту, без преувеличений, &quot;волшебную&quot; страну. Глядя на местные обычаи со своей колокольни 30-ти летнего проживания в Беларуси, многое весьма непривычно и вызывает смятение и растеренность. За это время много всего произошло, что изменило мою жизнь в корне, например, я стал чаще улыбаться =)
    
    </summary>
    
      <category term="путешествия" scheme="https://potofcode.com/categories/%D0%BF%D1%83%D1%82%D0%B5%D1%88%D0%B5%D1%81%D1%82%D0%B2%D0%B8%D1%8F/"/>
    
    
      <category term="USA" scheme="https://potofcode.com/tags/usa/"/>
    
  </entry>
  
  <entry>
    <title>Проектирование Rest API</title>
    <link href="https://potofcode.com/2016/12/11/article-rest-api-design-best-practices/"/>
    <id>https://potofcode.com/2016/12/11/article-rest-api-design-best-practices/</id>
    <published>2016-12-12T03:56:02.000Z</published>
    <updated>2017-03-24T02:42:43.605Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>Спроектировать Rest API для мобильного приложения, SPA( Single Page Application ) или просто как отдельного сервиса не так уж и просто.
С учетом моделей данных и особенностей архитектуры стэка, на котором он будет запущен этот процесс становится еще сложнее.
А если еще добавить аутентификацию пользователя, через авторизацию на стороннем сервисе, то процесс проектирования
может очень сильно затянуться. Что бы не потеряться во всем этом, я составил небольшой список лучших практик проектирования
Rest API с подробными объяснениями. Интересно? Читай далее.</p>
<a id="more"></a>
<h2 id="Содержание"><a href="#Содержание" class="headerlink" title="Содержание:"></a>Содержание:</h2><ol>
<li><a href="#Определения">Определения</a></li>
<li><a href="#Проектирование схемы">Проектирование схемы</a></li>
<li><a href="#Конечные адреса">Конечные адреса</a></li>
<li><a href="#Документация">Документация</a></li>
<li><a href="#Шифрование">Шифрование</a>
</li>
</ol>
<a name="Определения"></a><h3><a>Определения</a></h3>
<p>Сначала дадим некоторые определения и понятия, которые я буду использовать далее:</p>
<ul>
<li>Ресурс (Resource) - Экземпляр одиночного объекта. Например: товар</li>
<li>Коллекция (Collection) - Коллекция однотипных объектов. Например: товар</li>
<li>Схема (Schema) - Описание модели объекта или коллекции объектов. Например: для товара схема описывает название, цену,
тип, количество на складе, список свойств товара и т.д.</li>
<li>Конечный адрес (Endpoint) - URL который представляет ресурс или коллекцию</li>
</ul>
<a name="Проектирование схемы"></a><h3><a>Проектирование схемы</a></h3>
<p>На самом деле, проектирование Rest API начинается гораздо раньше чем вы можете подумать.
Проектирование начинается со схемы ресурсов и коллекций и их связей. Например вы проектируете социальную сеть Switter.
Базовые сущности социальной сети - это профили пользователей <code>Profile</code>.
Между профилями существуют связи в виде дружбы типа многие ко многим и разрешается она через вспомогательную схему <code>Friends</code>.
Внутри социальной сети можно обмениваться сообщениями <code>Message</code>.
Сообщение имеет отправителя и один или несколько адресатов.
Все участники беседы <code>Profiles</code> объединяются в <code>MessageGroups</code> через <code>ProfilesMessageGroups</code>,
и каждое сообщение <code>Messages</code> имеет свою <code>MessageGroups</code>. Визуально это выглядит так:</p>
<a href="https://potofcode.com/2016/12/11/article-rest-api-design-best-practices/schema.png" target="_blank"><img src="https://potofcode.com/2016/12/11/article-rest-api-design-best-practices/schema.png" alt="schema.png" title=""></a>
<p><a href="model.mwb">Скачать проект MySQL Workbench</a></p>
<p>Из схемы видно, что два профиля дружат, если в <code>Friend</code> существует запись в обе стороны с подтверждением.
Аналогично легко получить список переписок и всех участников каждой переписки и их сообщения.</p>
<p>Таким образом, перед проектирование Rest API необходимо определить схемы всех сущностей вашего приложения.</p>
<a name="Конечные адреса"></a><h3><a>Конечные адреса</a></h3>
<p>Есть несколько общепринятых правил составления конечных адресов.</p>
<a name="1. Никаких глаголов в конечных адресах"></a><h4><b>1. Никаких глаголов в конечных адресах</b></h4>
<p>Все возможные действия в Rest API выполняются с помощью HTTP методов:</p>
<ul>
<li>GET - получить</li>
<li>POST - создать</li>
<li>PUT - заменить</li>
<li>PATCH - частично изменить</li>
<li>DELETE - удалить</li>
</ul>
<p>Отсюда видно, что никаких изменений данных при GET запросе не должно происходить.</p>
<a name="2. Только существительные во множественном числе"></a><h4><b>2. Только существительные во множественном числе</b></h4>
<p>Не стоит смешивать единственное и множественное число ресурсов, это нарушает семантическое значение и может ввести в заблуждение.
Используйте всегда множественное. Например у вас есть ресурс <code>users</code>,
зайдя на него по конечному адресу <code>/api/v1/users</code> вы получите список пользователей, естественно ограниченный фильтрами по умолчанию,
как если бы вы зашли по адресу <code>/api/v1/users?offset=0&amp;limit=50</code>.
Но перейдя на адрес <code>/api/v1/users/1</code> мы как бы говорим: “получить объект с id=1 из ресурса пользователи”</p>
<a name="3. Используйте подзапросы в ресурсах с отношениями"></a><h4><b>3. Используйте подзапросы в ресурсах с отношениями</b></h4>
<p>Если мы хотим получить друзей пользователя под номером 1, то адрес будет следующим <code>/api/v1/users/1/friends</code>.
Этот подход позволяет избежать дополнительных запросов на сервер.</p>
<a name="4. Используйте HTTP заголовки для сообщения об ожидемом формате ответа"></a><h4><b>4. Используйте HTTP заголовки для сообщения об ожидемом формате ответа</b></h4>
<p>И клиент и сервер должны знать в каком формате общаться и этот формат должен быть предоставлен в HTTP заголовке.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Content-Type - формат запроса</div><div class="line">Accept - список поддерживаемых форматов для ответа</div></pre></td></tr></table></figure>
<p>Постарайтесь избежать использование формата в URL</p>
<a name="5. Используйте HATEOAS"></a><h4><b>5. Используйте HATEOAS</b></h4>
<p>HATEOAS - это Hypermedia as the Engine of Application State,
что по сути это метаинформация о структуре вашего сервиса, которая может быть использована для автоматического исследования (service autodiscover).
Что дает возможность некоторым приложениям без человеческого вмешательства исследовать ваш сервис.
Например имеем ответ от сервера с адреса <code>/api/v1/users/1</code>:
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"firstName"</span>: <span class="string">"Ivan"</span>,</div><div class="line">    <span class="attr">"lastName"</span>: <span class="string">"Ivanov"</span>,</div><div class="line">    <span class="attr">"autodiscover"</span>: &#123;</div><div class="line">        <span class="attr">"friends"</span>: <span class="string">"`/api/v1/users/1/friends"</span>,</div><div class="line">        <span class="attr">"photos"</span>: <span class="string">"`/api/v1/users/1/photos"</span>,</div><div class="line">        <span class="attr">"messages"</span>: <span class="string">"`/api/v1/users/1/messages"</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>в секции <code>autodiscover</code> мы видим список ресурсов, которые относятся к текущему.</p>
<a name="6. Предоставьте возможности фильтрации, сортировки, выбора полей, ограничения и смещения записей для колекций"></a><h4><b>6. Предоставьте возможности фильтрации, сортировки, выбора полей, ограничения и смещения записей для колекций</b></h4>
<p>Для таких целей, лучше поддерживать какой-нибудь язык запросов, позволяющий расширить стандартный, например graphql.
Я же приведу примеры на псевдоязыке:</p>
<ul>
<li>Фильтрация - Поддерживайте фильтрацию с выражениями <code>/api/v1/users?filter=(firstName=&#39;Ivan&#39;,lastName=/^Ivan/,age&gt;=18)</code></li>
<li>Сортировка - Поддерживайте сортировку по возрастанию и убыванию для нескольких полей <code>/api/v1/users?sort=(firstName:1,DOB:0)</code></li>
<li>Выбор полей - Поддерживайте выбор полей, это не только уменьшит трафик, но и позволит быстрее работать клиенту, обрабатывая меньшее количество данных
<code>/api/v1/users?fields=[firstName, lastName, DOB]</code></li>
<li>Ограничение и смещение - Поддерживайте параметры limit и offset, для контроля количества отдаваемых сущностей,
так же это более гибкий подход, чем постраничный <code>/api/v1/users?offset=20&amp;limit=10</code></li>
</ul>
<a name="7. Поддерживайте версионность API"></a><h4><b>7. Поддерживайте версионность API</b></h4>
<p>Время от времени, стандарты и интерфейсы вашего API могут меняться и что бы избежать путаницы используйте версионность.
Избегайте API без версий или API с дробными значениями <code>/api/v100500/users</code></p>
<a name="8. Обрабатывайте ошибки по HTTP кодам"></a><h4><b>8. Обрабатывайте ошибки по HTTP кодам</b></h4>
<p>Протокол HTTP поддерживает огромное количество <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%BA%D0%BE%D0%B4%D0%BE%D0%B2_%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D1%8F_HTTP" target="_blank" rel="external">кодов состояний</a>
Не обязательно использовать их все, достаточно этих 13:</p>
<ul>
<li>200 – OK – ответ отправлен успешно, обычно ответ на: GET</li>
<li>201 – Created – создание успешно завершено, обычно ответ на: POST, PUT</li>
<li>204 – Accepted – удаление или редактирование успешно завершено, обыно ответ на: PATCH, DELETE</li>
<li>205 – Reset Content – после выполнения операции необходимо обновить данные</li>
<li>304 – Not Modified – ничего не изменилось, можно взять данные из кэша приложения</li>
<li>400 – Bad Request – неправильный запрос, подробности обыно предоставляют в теле ответа</li>
<li>401 – Unauthorized – пользователь не авторизован</li>
<li>402 – Payment Required – пользователю необходимо произвести оплату для продолжения</li>
<li>403 – Forbidden – пользователь авторизован, но не имеет привиллегий для выполнения операции</li>
<li>404 – Not found – ресурс не найден</li>
<li>415 – Unsupported Media Type – например, если пользователь загружает текстовый файл вместо ожидаемой картинки</li>
<li>500 – Internal Server Error – этот код лучше не использовать, но записывать в логи все данные об ошибке</li>
<li>501 – Not implemented – используется для сообщения, что данная операция не реализована на сервере, например если ваше приложение в стадии активной разработки</li>
</ul>
<p>При ответе об ошибки помещайте дополнительную информацию в тело запроса (payload - полезная нагрузка)</p>
<a name="9. Поддерживайте переопределение HTTP методов"></a><h4><b>9. Поддерживайте переопределение HTTP методов</b></h4>
<p>Достаточно редкий случай, но некоторые прокси серверы поддерживают только GET и POST запросы.
В таком случае можно реализовать служебный заголовок <code>X-HTTP-Method-Override</code>, для замены POST метода на метод указанный в нем.</p>
<a name="4. Документация"></a><h3><a>4. Документация</a></h3>
<p>Какой бы user-friendly не был ваш API он обязательно должен быть документирован, от схем до значений HTTP кодов.
Существуют множество способов документирования API, наиболее популярный и на мой взляд понятный - это <a href="http://swagger.io" target="_blank" rel="external">swagger</a>,
ко всему у них можно найти спецификацию Rest API (стандарт, которому они следуют).</p>
<a name="5. Шифрование"></a><h3><a>5. Шифрование</a></h3>
<p>Старайтесь использовать SSL шифрование. Сертификаты легко и бесплатно можно получить на <a href="https://www.startssl.com/" target="_blank" rel="external">StartSLL</a> или <a href="https://letsencrypt.org/" target="_blank" rel="external">LetsEncrypt</a>.</p>
]]></content>
    
    <summary type="html">
    
      Как спроектировать Rest API для мобильного приложения или SPA
    
    </summary>
    
      <category term="Статьи" scheme="https://potofcode.com/categories/%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8/"/>
    
    
      <category term="rest api" scheme="https://potofcode.com/tags/rest-api/"/>
    
  </entry>
  
  <entry>
    <title>Как создать статический блог с коментариями на Hexo</title>
    <link href="https://potofcode.com/2016/10/10/article-free-static-blog-with-hexo/"/>
    <id>https://potofcode.com/2016/10/10/article-free-static-blog-with-hexo/</id>
    <published>2016-10-11T00:22:45.000Z</published>
    <updated>2016-12-15T22:21:41.100Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>Я уже писал о том <a href="/2016/09/25/hello-world-github-pages/">как бесплатно захостить статический сайт на GitHub с Custom Domain и HTTPS</a>.</p>
<p>В этот раз я расскажу немного о преимуществах статических сайтов и как создать свой статический блог, подключить к нему сервис коментариев, кнопки соц. сетей, который можно будет хостить на GitHub.</p>
<p>Стало интересно? Читай далее.
<a id="more"></a></p>
<p>Действительно, статический сайт, это очень удобно, просто и практично, различные динамические данные можно поключить через сторонние сервисы,
оставив только статику, которую намного проще хостить и поддерживать, например на том же Github.</p>
<p>Содержание</p>
<ol>
<li><a href="#Почему статический сайт?">Почему статический сайт?</a></li>
<li><a href="#Что же такое Hexo?">Что же такое Hexo?</a></li>
<li><a href="#Установка и настройка">Установка и настройка</a></li>
<li><a href="#Первый пост">Первый пост</a>
</li>
</ol>
<a name="1. Почему статический сайт?"></a><h3><a>1. Почему статический сайт?</a></h3>
<p>Здесь можно много спорить о статике и динамике, но существуют неоспоримые два преимущества статики перед динамикой:</p>
<ol>
<li>Скорость - даже кешированая динамическая страница грузится первый раз ( для кэша) медленнее. А закэшировав ее необходимо отслеживать ее консистентность, т.к.
измененные данные, могут не отобразиться, т.к. не обновился кэш.</li>
<li>Безопасность - для создания сайта используются различные готовые решения, такие как WordPress и зачастую содержат ошибки, которые открывают двери злоумышленникам.
Не верите? Вбейте в гугл <code>уязвимости wordpress</code>. И это не говоря о уязвимостях самих языков программирования, таких как PHP, Ruby и прочие.</li>
</ol>
<p>Единственное неудобство статики связано с генерацией страниц и загрузкой их на сервер при каждом обновлении контента, но этот процесс можно легко автоматизировать,
а все динамические данные легко работают со сторонними сервисами, например интеграция социальных сетей типа фейсбука или вконтакте, все равно без них сейчас никак =)</p>
<a name="2. Что же такое Hexo?"></a><h3><a>2. Что же такое Hexo?</a></h3>
<p>Hexo - это фреймворк написанный на node js для генерации статических блогов, который поддерживает несколько языков разметки (в том числе Markdown),
имеет <a href="https://hexo.io/plugins/" target="_blank" rel="external">множество плагинов</a> и <a href="https://hexo.io/themes/" target="_blank" rel="external">там оформления</a>.
Так же не составит труда создать свою тему с минимальными знаниями верстки.
Всю информацию можно найти <a href="https://hexo.io/" target="_blank" rel="external">на официальном сайте HEXO</a></p>
<a name="3. Установка и настройка"></a><h3><a>3. Установка и настройка</a></h3>
<p>Для начала нам понадобится установить Node JS и npm, про установку, можно <a href="/2016/03/13/hello-world-node-js/">прочесть здесь</a>
Так же понадобиться аккаунт на Github с именем вашего блога, например <code>my-cool-blog</code>, в нем необходимо создать репозиторий <code>my-cool-blog.github.io</code>,
где будет храниться наш сайт, подробнее можно <a href="/2016/09/25/hello-world-github-pages/">прочесть здесь</a></p>
<p>После того как Node JS и npm установлены, необходимо установить HEXO, создадать проект и настроить его. Запускаем комндную строку и выполняем:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i -g hexo-cli</div><div class="line">hexo init my-cool-blog</div><div class="line"><span class="built_in">cd</span> my-cool-blog</div><div class="line">npm i</div></pre></td></tr></table></figure></p>
<p>После недолгого ожидания у вас должна появится готовая директория с проектом.
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure></p>
<ul>
<li><code>_config.yml</code> - конфигурационный файл</li>
<li><code>scaffolds</code>   - директория с шаблонами страниц, поумолчанию используется <code>post</code></li>
<li><code>source</code>      - исходные файлы вашего блога. Здесь можно хранить картинки, стили, скрипты. Файлы и директории начинающиеся с <code>_</code> будут игнорироваться.
В <code>_posts</code> будут лежать опубликованный контент, а в <code>_drafts</code> черновики</li>
<li><code>themes</code>      - темы оформления</li>
</ul>
<p>Также в нее будет установлена тема оформлению поумолчанию <code>landscape</code>.
Теперь добавим несколько очень нужных плагинов. Это <code>sitemap.xml</code> генератор, поддержка шаблонизатора <code>jade</code> (сейчас он называется <code>pug</code>) и препроцессор <code>stylus</code>:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i --save hexo-generator-seo-friendly-sitemap hexo-renderer-jade hexo-renderer-stylus</div></pre></td></tr></table></figure></p>
<p>Все необходимые модули установлены, теперь приступим к конфигурации. Откроем <code>_config.yml</code> и добавим/изменим следующие строки:
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">sitemap:</span></div><div class="line"><span class="attr">    path:</span> <span class="string">sitemap.xml</span> <span class="comment"># Путь к sitemap.xml</span></div><div class="line"></div><div class="line"><span class="attr">marked:</span></div><div class="line"><span class="attr">  gfm:</span> <span class="literal">true</span>           <span class="comment"># Поддержка markdown</span></div><div class="line"><span class="attr">  breaks:</span> <span class="literal">false</span>       <span class="comment"># Отключаем чувствительность к разрывам сстрок</span></div><div class="line"></div><div class="line"><span class="attr">skip_render:</span>          <span class="comment"># секция для игнорирования файлов в source директории</span></div><div class="line"><span class="bullet">  -</span> <span class="string">'code/**/*'</span>       <span class="comment"># blob маска для игнорирования обработки файлов, я использую это для демок</span></div><div class="line"></div><div class="line"><span class="attr">new_post_name:</span> <span class="string">:year/:month/:title.md</span>   <span class="comment"># каждый пост будет храниться по пути /год/месяц/название-поста.md</span></div><div class="line"></div><div class="line"><span class="attr">disqus_shortname:</span> <span class="string">mycoolblog</span>            <span class="comment"># необходимо зарегистрироваться на disqus.com и получить свой ID</span></div></pre></td></tr></table></figure></p>
<p>После открываем файл <code>scaffolds/post.md</code> и изменяем его содержимое на следующее
<figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">description: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">keywords: []</div><div class="line">categories: []</div><div class="line">tags: []</div><div class="line"><span class="section">comments: true</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<a name="Первый пост"></a><h3><a>Первый пост</a></h3>
<p>Теперь можно открыть окно командной строки и выполнить команду
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo new my-first-cool-post</div></pre></td></tr></table></figure></p>
<p>в результате выполнения будет сгенерирован файл поста и отображено сообщение
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">INFO  Created: d:\projects\my-cool-blog\<span class="built_in">source</span>\_posts\year\month\my-first-cool-post.md</div></pre></td></tr></table></figure></p>
<p>открываем файл в Markdown редакторе либо в онлайн редакторе вроде stackedit.io либо dillinger.io и редактируем
<figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: Мой первый мегапост</div><div class="line">description: Это мой первый мегапост в моем статическом блоге на Hexo</div><div class="line">date: 2016-10-10 20:22:45</div><div class="line">keywords: [Блог]</div><div class="line">categories: [Статья]</div><div class="line"><span class="section">tags: [Блог, Hexo]</span></div><div class="line">---</div><div class="line"></div><div class="line">Всем привет!</div><div class="line"></div><div class="line">Это мой первый пост в статическом блоге</div><div class="line">&lt;!-- More --&gt;</div><div class="line"></div><div class="line">Статика это круто!</div></pre></td></tr></table></figure></p>
<p>Сохраняем наши изменения и выполняем команду
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">call hexo clean &amp;&amp; call hexo server <span class="_">-l</span> --config _config.yml</div></pre></td></tr></table></figure></p>
<p>По умолчанию открыв адрес <code>http://localhost:4000/</code> вы должны увидеть ваш первый пост</p>
]]></content>
    
    <summary type="html">
    
      В статье подробное описание процесса создания статического блога на Hexo с подключением сервиса коментариев Disqus
    
    </summary>
    
      <category term="Статьи" scheme="https://potofcode.com/categories/%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8/"/>
    
    
      <category term="node js" scheme="https://potofcode.com/tags/node-js/"/>
    
      <category term="hexo" scheme="https://potofcode.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Как создать свой сайт на GitHub с Custom Domain и HTTPS</title>
    <link href="https://potofcode.com/2016/09/25/hello-world-github-pages/"/>
    <id>https://potofcode.com/2016/09/25/hello-world-github-pages/</id>
    <published>2016-09-26T01:14:16.000Z</published>
    <updated>2017-04-04T01:07:47.125Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>В последнее время стали очень популярны статические сайты, а в том числе и статические блоги. Даже меня не обшло стороной это веяние и
поддавшись искушению и всеобщему хайпу, я перевел свой блог в ряды статических сайтов. Хостится он на GitHub с Custom Domain и проксируется
через Cloud Flare, раздавая трафик по HTTPS. Хочешь узнать как? Читай далее.
<a id="more"></a></p>
<h3 id="Подготовка"><a href="#Подготовка" class="headerlink" title="Подготовка"></a>Подготовка</h3><h4 id="Cloud-Flare"><a href="#Cloud-Flare" class="headerlink" title="Cloud Flare"></a>Cloud Flare</h4><p>Регистрируемся на <a href="https://cloudflare.com" target="_blank" rel="external">Cloud Flare</a> и добавляем свое доменное имя, например <code>my-cool-blog.com</code>
<a href="https://potofcode.com/2016/09/25/hello-world-github-pages/cloudflare-step-1.png" target="_blank"><img src="https://potofcode.com/2016/09/25/hello-world-github-pages/cloudflare-step-1.png" alt="cloudflare-step-1.png" title=""></a>
жмем <em>Begin Scan</em> и ждем окончания процесса. После окончания сканирования жмем продолжить, перед вами будет экран со всеми записями
домена, его можно пропустить (позже мы вернемся к нему) и нажать продолжить. Выбираем план подписки для данного домена и жмем продолжить.
Появится экран с NS записями, где необходимо скопировать адреса:
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dana.ns.cloudflare.com</div><div class="line">todd.ns.cloudflare.com</div></pre></td></tr></table></figure></p>
<p>и заменить ими ваши текущие NS записи.</p>
<p>Все должно быстро обновиться и теперь идем в раздел <em>Crypto</em> и выставляем SSL значение Flexible.</p>
<p>Переходим в раздел <code>Page Rules</code> и создаем правило для URL <code>http://*my-cool-blog.com/*</code> жмем <em>Add Settings</em> и выбираем <em>Always use HTTPS</em>.</p>
<p>И наконец переходим во вкладку <code>DNS</code> и добавляем 2 A-записи для IP адресов: 192.30.252.153 и 192.30.252.154.
Это адреса GitHub серверов и жмем на тучки, что бы выставить статус <em>DNS and HTTP proxy(CDN)</em>.</p>
<h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>Создаем одноименный аккаунт на <a href="https://github.com" target="_blank" rel="external">GitHub</a> <code>my-cool-blog</code>.
Далее создаем репозиторий с именем <code>my-cool-blog.github.io</code> и переходим в настройки.
Там в группе <em>GitHub Pages</em> находим поле <em>Custom Domain</em> и вводим свое доменное имя.</p>
<h3 id="Проверка"><a href="#Проверка" class="headerlink" title="Проверка"></a>Проверка</h3><p>Выполняем
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mkdir my-cool-blog</div><div class="line"><span class="built_in">cd</span> my-cool-blog</div><div class="line">git <span class="built_in">clone</span> https://github.com/my-cool-blog/my-cool-blog.github.io.git .</div></pre></td></tr></table></figure></p>
<p>создаем файл <code>index.html</code>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>My Cool Blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Cool Blog<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Выполняем
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git add --all</div><div class="line">git ci -am <span class="string">"my first post"</span></div><div class="line">git push</div></pre></td></tr></table></figure></p>
<p>и переходим по URL <code>http://my-cool.blog.com</code>.</p>
<p>Должен произойти редирект на <code>https://my-cool-blog.com</code>.</p>
<h3 id="Профит"><a href="#Профит" class="headerlink" title="Профит"></a>Профит</h3><p>Качественный бесплатный хостинг, для статического сайта с HTTPS, DDoS защитой и самое главное - это версионность, так как все хостится на GitHub.</p>
]]></content>
    
    <summary type="html">
    
      Подробное описание процесса создания сайта на GitHub с Custom Domain и HTTPS
    
    </summary>
    
      <category term="Статьи" scheme="https://potofcode.com/categories/%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8/"/>
    
    
      <category term="github" scheme="https://potofcode.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World. Gulp</title>
    <link href="https://potofcode.com/2016/09/11/hello-world-gulp/"/>
    <id>https://potofcode.com/2016/09/11/hello-world-gulp/</id>
    <published>2016-09-12T00:21:27.000Z</published>
    <updated>2016-09-12T01:28:07.401Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>В этом Hello World я расскажу как использовать инструмент разработки Gulp в своих проектах.
Рассмотрим установку, настройку и примеры использования. Хочешь разобраться с Gulp, читай далее.
<a id="more"></a></p>
<h3 id="Для-чего-нужен-Gulp"><a href="#Для-чего-нужен-Gulp" class="headerlink" title="Для чего нужен Gulp?"></a>Для чего нужен Gulp?</h3><p>Gulp - это планировщик задач. Что это значит?
Например, у нас есть директория <code>src</code> где ведется разработка проекта и директория <code>build</code>, куда проект собирается и
 необходимо выполнить следующие задачи при сборке проекта:</p>
<ul>
<li>очистить директорию сборки</li>
<li>скопировать все <code>css</code> файлы, кроме <code>*.dev.css</code>, в <code>css</code> директорию сборки, после ее очистки</li>
<li>скопировать все <code>js</code> файлы, кроме <code>*.dev.js</code>, в <code>js</code> директорию сборки, после ее очистки</li>
<li>скопировать все картинки из директории <code>images</code>, в <code>images</code> директорию сборки, после ее очистки</li>
<li>скопировать все <code>html</code>, в корень директории сборки, после ее очистки</li>
</ul>
<p>Все эти задачи можно сконфигурировать для Gulp в очень удобной и понятной форме и выполнить их в заданной последовательности.</p>
<h3 id="Установка-и-настройка-Gulp"><a href="#Установка-и-настройка-Gulp" class="headerlink" title="Установка и настройка Gulp"></a>Установка и настройка Gulp</h3><p>Что бы установить, настроить, а позже исползовать Gulp, необходимо установить его глобально
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i -g gulp</div></pre></td></tr></table></figure></p>
<p>и локально в проект
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i --save-dev gulp</div></pre></td></tr></table></figure></p>
<p>Gulp использует конфигурационный файл <code>gulpfile.js</code>, вот его примерный шаблон
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'task-1'</span>, completeCallback =&gt; &#123;</div><div class="line">    <span class="comment">// Some task-1 code</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//await while task-1 finished</span></div><div class="line">gulp.task(<span class="string">'task-2'</span>, [<span class="string">'task-1'</span>], completeCallback =&gt; &#123;</div><div class="line">    <span class="comment">// Some task-2 code</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'task-1'</span>, <span class="string">'task-2'</span>]);</div></pre></td></tr></table></figure></p>
<p>Для выполнения конкретной задачи, необходимо выполнить команду:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gulp [task-name]</div></pre></td></tr></table></figure></p>
<p>Для выполнения задачи по умолчанию, [task-name] не указывается.</p>
<h3 id="От-теории-к-практике"><a href="#От-теории-к-практике" class="headerlink" title="От теории к практике"></a>От теории к практике</h3><p>Давайте рассмотрим на примере задач, которые я привел выше. Для этого установим дополнительный модуль,
для удаления файлов по glob маске
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i --save-dev del</div></pre></td></tr></table></figure></p>
<p>Конфигурационный файл <code>gulpfile.js</code> примет следующий вид
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Build directory clean task</span></div><div class="line">gulp.task(<span class="string">'clean'</span>, cb =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> del(<span class="string">'./build'</span>, cb);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Copy css files to css build directory except *.dev.css after clean task</span></div><div class="line">gulp.task(<span class="string">'css-copy'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./src/css/**/*.css'</span>, <span class="string">'!./src/css/**/*.dev.css'</span>])</div><div class="line">        .pipe(gulp.dest(<span class="string">'./build/css'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Copy js files to js build directory except *.dev.js after clean task</span></div><div class="line">gulp.task(<span class="string">'js-copy'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./src/js/**/*.js'</span>, <span class="string">'!./src/css/**/*.dev.js'</span>])</div><div class="line">        .pipe(gulp.dest(<span class="string">'./build/js'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Copy all files from images directory to images build directory after clean task</span></div><div class="line">gulp.task(<span class="string">'images-copy'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./src/images/*.*'</span>])</div><div class="line">        .pipe(gulp.dest(<span class="string">'./build/images'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Copy all html files to html build directory after clean task</span></div><div class="line">gulp.task(<span class="string">'html-copy'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./src/*.html'</span>])</div><div class="line">        .pipe(gulp.dest(<span class="string">'./build'</span>));</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Default task for execute all tasks in single one</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>, <span class="string">'css-copy'</span>, <span class="string">'js-copy'</span>, <span class="string">'images-copy'</span>, <span class="string">'html-copy'</span>]);</div></pre></td></tr></table></figure></p>
<p>Теперь запустив команду
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure></p>
<p>проект будет полностью собран в директорию сборки.</p>
]]></content>
    
    <summary type="html">
    
      Hello World. Gulp
    
    </summary>
    
      <category term="Уроки" scheme="https://potofcode.com/categories/%D1%83%D1%80%D0%BE%D0%BA%D0%B8/"/>
    
    
      <category term="javascript" scheme="https://potofcode.com/tags/javascript/"/>
    
      <category term="node js" scheme="https://potofcode.com/tags/node-js/"/>
    
      <category term="hello world" scheme="https://potofcode.com/tags/hello-world/"/>
    
      <category term="gulp" scheme="https://potofcode.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>World of Warcraft Legion головоломки шаманов. Генетический алгоритм решения</title>
    <link href="https://potofcode.com/2016/09/06/game-wow-legion-shaman-puzzles/"/>
    <id>https://potofcode.com/2016/09/06/game-wow-legion-shaman-puzzles/</id>
    <published>2016-09-06T23:17:00.000Z</published>
    <updated>2016-09-06T05:18:37.267Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>Не так давно, вышло очередное дополнение World of Warcraft Legion. Первым делом я принялся прокачивать шамана и был приятно
удивлен получив артифактное оружие в оплоте шаманов. Я забрел к Мастеру головоломок Ло и увидел то, что вы подумали - головоломку.</p>
<p>Передо мной был квадрат из огненных и водных тотемов 5 на 5, после того как кликаешь на тотем, он меняется на противоположный,
например водный на огненный или огненный на водный и так же меняет сверху, снизу, слева и справа. Необходимо сделать так,
что бы все тотемы стали водными. После первого клика я понял, что срочно нужно написать решение для этой головоломки.</p>
<p>Что из этого получилось, читайте далее.
<a id="more"></a>
Задача стояла следующая:
Дана матрица размерности N на M, каждая ячейка матрицы содержит либо 0 либо 1. При изменении значения ячейки матрицы
на противоположное, автоматически меняются на противоположные значения на соседних ячейках сверху, снизу, слева и справа.
Найти последовательность изменений ячеек, что бы матрица состояла только из нулей.</p>
<p>Сначала в голову пришла мысль о переборе всех возможных комбинаций с оптимизацией. Но это все скучно. И я решил написать
генетический алгоритм решения задачи.</p>
<h2 id="Немного-теории"><a href="#Немного-теории" class="headerlink" title="Немного теории"></a>Немного теории</h2><p>Для написания алгритма нам понадобится ввести поняия генов, генотипа, фитнес функции, мутация, поколения и выживания поколения.</p>
<h3 id="Гены"><a href="#Гены" class="headerlink" title="Гены"></a>Гены</h3><p>Геном будем называть значение ячейки матрицы, т.е. это либо 1 либо 0</p>
<h3 id="Генотип"><a href="#Генотип" class="headerlink" title="Генотип"></a>Генотип</h3><p>Генотипом будем называть матрицу представленную в виде строки длинной L = N x M, которая будет содержать последовательно
объединенные строки матрицы, каждый символ строки - это ген</p>
<blockquote>
<p><strong>Пример</strong>
Для матрицы
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">[</div><div class="line">    [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</div><div class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">    [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</div><div class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</div><div class="line">    [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>Генотипом будет строка <code>0000011111000001111100000</code>, где L = 25</p>
</blockquote>
<h3 id="Фитнесс-функция"><a href="#Фитнесс-функция" class="headerlink" title="Фитнесс функция"></a>Фитнесс функция</h3><p>Фитнесс функцией (Функцией приспособленности) назовем функцию, которая возвращает число от 0 до 1,
чем ближе значение к 1 тем лучше преспособленность индивида. Остается вопрос, что же считать приспособленностью индивида.
Для простоты можем обойтись количеством нулевых генов в генотипе разделенное на длину генотипа</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fitness</span>(<span class="params">genotype</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> genotype.replace(<span class="regexp">/1/g</span>,<span class="string">''</span>).length / genotype.length;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Мутация"><a href="#Мутация" class="headerlink" title="Мутация"></a>Мутация</h3><p>Изменение одного гена в генотипе индивида. Т.к. по правилам игры меняются 5 ячеек матрицы (целевая и соседние),
то одна мутация будет давать 5 новых индивидов.
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> DIRECTIONS = [</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="attr">x</span>:<span class="number">-1</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">1</span>&#125;,</div><div class="line">    &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>:<span class="number">-1</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutate</span>(<span class="params">genotype</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> DIRECTIONS.map( <span class="function"><span class="params">direction</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">const</span> nextX = x + direction.x;</div><div class="line">        <span class="keyword">const</span> nextY = y + direction.y;</div><div class="line">        <span class="keyword">return</span> genotype.flip(nextX, nextY);</div><div class="line">   &#125; );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Выживание"><a href="#Выживание" class="headerlink" title="Выживание"></a>Выживание</h3><p>Селекция индивидов по приспособленности в результате которой, остается ограниченное число наиболее приспособленных.
В нашем случае мы сортируем всех индивидов по убыванию значения фитнесс функции и оставляем первых N x M x 8</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> maxGenerationSize = <span class="number">400</span>; <span class="comment">// 5 * 5 * 8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">surviving</span>(<span class="params">populations</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> populations.sort( <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> b.fitness - a.fitness;</div><div class="line">    &#125;).slice(<span class="number">0</span>, maxGenerationSize);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Поколение"><a href="#Поколение" class="headerlink" title="Поколение"></a>Поколение</h3><p>Множество индивидов оставшихся после “Выживания”.
Причем самый первый индивид поколения и будет решением, если его приспособленость равна единице</p>
<h2 id="Еще-немного-теории"><a href="#Еще-немного-теории" class="headerlink" title="Еще немного теории"></a>Еще немного теории</h2><p>Можно заметить, что после мутации очень часто можно получить ранее известный геном либо геном, полученный меньшим количеством
мутаций, но с такой же или лучшей приспособленностью. Что бы такого не происходило, создадим хэш-таблицу геномов, ключом которой
будет сам геном, а значением, массив из ячеек мутаций. В случае если этот геном уже встречался и количество ячеек мутаций
не превосходит уже встречавшейся, создаем из него покаление.</p>
<p>Также легко заметить, что мы меняем на всем поле либо 3 либо 5 ячеек, т.е. фитнесс функция возвращает 1 только после значений
<code>L - 3</code> и <code>L - 5</code>. Для них, можно возращать значения фтнесс функции <code>0.999</code>, что бы увеличить их приспособленность</p>
<blockquote>
<p><strong>Пример</strong>
Для марицы 5x5 значение фитнесс функции 1 будет при наличии всех 25 нулей в геноме, а им предшедствуют только либо 20 нулей либо 22</p>
</blockquote>
<p>Весь цикл поиска решения можно представить в виде следующего кода
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">while</span> ( generation++ &lt; maxGenerationsCount &amp;&amp; populations[0].fitness !== 1 ) &#123;</div><div class="line">    populations = mutating( populations );</div><div class="line">    populations = surviving( populations );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>В итоге получилось такое вот приложение</p>
<a href="https://potofcode.com/2016/09/06/game-wow-legion-shaman-puzzles/example.png" target="_blank"><img src="https://potofcode.com/2016/09/06/game-wow-legion-shaman-puzzles/example.png" alt="example.png" title=""></a>
<ul>
<li><a href="https://potofcode.com/code/game-wow-legion-shaman-puzzles" target="_blank">Посмотреть на готовое решние можно здесь</a></li>
<li><a href="https://github.com/potofcode/game-wow-legion-shaman-puzzles" target="_blank">Исходники на GitHub</a>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      World of Warcraft Legion головоломки шаманов. Генетический алгоритм решения
    
    </summary>
    
      <category term="Игры" scheme="https://potofcode.com/categories/%D0%B8%D0%B3%D1%80%D1%8B/"/>
    
    
      <category term="Games" scheme="https://potofcode.com/tags/games/"/>
    
      <category term="WoW" scheme="https://potofcode.com/tags/wow/"/>
    
      <category term="GA" scheme="https://potofcode.com/tags/ga/"/>
    
  </entry>
  
  <entry>
    <title>Hello World. NPM</title>
    <link href="https://potofcode.com/2016/08/21/hello-world-npm/"/>
    <id>https://potofcode.com/2016/08/21/hello-world-npm/</id>
    <published>2016-08-22T03:08:13.000Z</published>
    <updated>2016-11-04T23:55:21.162Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>В этом <code>Hello World</code> мы разберем основные возможности менеджера модулей NPM для <code>node js</code>  и как создать свой NPM модуль.</p>
<a id="more"></a>
<h2 id="Немного-теории"><a href="#Немного-теории" class="headerlink" title="Немного теории"></a>Немного теории</h2><p>NPM - это менеджер пакетов для node js, поставляемый поумолчанию вместе с node js.</p>
<p>Что бы воспользоваться NPM необходимо установить <code>node js</code> для этого идем на <a href="https://nodejs.org" target="_blank" rel="external">nodejs.org</a> и следуем инструкциям по установке.
Когда <code>node js</code> будет установлен, необходимо открыть командную строку и выпонить команду:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>Если <code>node js</code> установлен правильно, вы увидите версию <code>NPM</code>. <code>NPM</code> это Node Package Manager.
Его задача, устанавливать модули <code>Node JS</code> и решать конфликты между ними.</p>
<p>Для установки модулей используется команда:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install [package1, package2, etc]</div></pre></td></tr></table></figure></p>
<p>Перед тем как, что либо устанавливать, необходимо знать, что существует 2 типа установки модулей:</p>
<ol>
<li>Локальный</li>
<li>Глобальный</li>
</ol>
<p>При локальной установке, модуль будет установлен в директорию <code>node_modules</code> текущего проекта, а при глобальной, в глобальную дерикторию <code>NPM</code>.
Чаще всего в глобальную директорию устанавливают модули интерфейса командной строки, либо их подмодули. Для такого типа установки добавляют аргумент <code>-g</code>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install -g [package1, package2, etc]</div></pre></td></tr></table></figure></p>
<p>В локальную директорию устанавливают модули, которые должны быть непосредственно включены в проект либо, которые используются при его разработке.
Для такой установки выполняют команды
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save [package1, package2, etc]</div></pre></td></tr></table></figure></p>
<p>и
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install --save-dev [package1, package2, etc]</div></pre></td></tr></table></figure></p>
<p>соответственно.</p>
<p>Для того, что бы имена локальных модулей были сохранены, <code>NPM</code> использует конфигурационный файл <code>package.json</code> в котором хранит модули проекта и модули разработки
в секциях: <code>dependencies</code> и <code>devDependencies</code> соответственно. Создать такой файл можно командой
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>или
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm init -y</div></pre></td></tr></table></figure></p>
<p>если лень отвечать на вопросы.</p>
<h2 id="От-теории-к-практике"><a href="#От-теории-к-практике" class="headerlink" title="От теории к практике"></a>От теории к практике</h2><p>Сейчас мы создадим простую командную утилиту <code>gerp</code>, которая будет частично напоминать команду <code>grep</code> в Linux.</p>
<blockquote>
<p>grep — утилита командной строки, которая находит на вводе строки, отвечающие заданному регулярному выражению,
 и выводит их, если вывод не отменён специальным ключом.
 Название представляет собой акроним английской фразы «search <strong>globally</strong> for lines matching the <strong>regular</strong> <strong>expression</strong>,
 and <strong>print</strong> them» — «искать везде строки, соответствующие регулярному выражению, и выводить их».</p>
</blockquote>
<p>Создадим директорию <code>gerp</code>:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">mkdir gerp</div><div class="line"><span class="built_in">cd</span> gerp</div></pre></td></tr></table></figure></p>
<p>и инициализируем ее
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm init -y</div></pre></td></tr></table></figure></p>
<p>команда создаст файл <code>package.json</code> и отобразит его содержимое
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"gerp"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Отредактируем этот файл, добавив секции <code>bin</code> и <code>patch-release</code> в секцию <code>script</code>:
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"gerp"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"gerp is a command-line utility for searching plain-text data sets for lines matching a regular expression"</span>,</div><div class="line">  <span class="attr">"bin"</span>: &#123;</div><div class="line">    <span class="attr">"gerp"</span>: <span class="string">"./index.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"patch-release"</span>: <span class="string">"npm version patch &amp;&amp; npm publish"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>Секция <code>bin</code> указывает на то, что этот модуль будет выполняться из коммандной строки, с помощью команды <code>gerp</code>, а точкой входа в него
будет файл <code>index.js</code>.</li>
<li>Секция <code>patch-release</code> выполняет увелечение версии в файле <code>package.json</code> и пудликует модуль на <code>npm.org</code></li>
</ul>
<p>Так как команда <code>grep</code> в Linux подкрашивает совпадения, мы воспользуемся сторонним модулем <code>color</code> для этого:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i --save color</div></pre></td></tr></table></figure></p>
<p>Команда <code>i</code> псевдоним команды <code>install</code>. После выполнения этой команды, в файле <code>package.json</code> должна появиться секция:
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">"dependencies": &#123;</div><div class="line">  "colors": "^1.1.2"</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Теперь создаем файл <code>index.js</code> со следующим содержимым:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node</span></div><div class="line"><span class="comment">// поключаем модуль цветов</span></div><div class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</div><div class="line"><span class="comment">// поключаем модуль построчного чтения</span></div><div class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</div><div class="line"><span class="comment">// создаем интерфейс для чтения стандартного потока ввода</span></div><div class="line"><span class="keyword">const</span> lineReader = readline.createInterface(&#123;</div><div class="line">    <span class="attr">input</span>: process.stdin</div><div class="line">&#125;);</div><div class="line"><span class="comment">// считываем агрумент командной строки для программы</span></div><div class="line"><span class="keyword">const</span> [expr] = process.argv.slice(<span class="number">2</span>);</div><div class="line"><span class="comment">// конструируем регулярное выражение из агрумента</span></div><div class="line"><span class="keyword">const</span> searchExpr = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;expr&#125;</span>)`</span>,<span class="string">'g'</span>);</div><div class="line"></div><div class="line">lineReader.on(<span class="string">'line'</span>, line =&gt; &#123;</div><div class="line">    <span class="comment">// если строка проходит проверку регулярным выражением</span></div><div class="line">    <span class="keyword">if</span> (searchExpr.test(line)) &#123;</div><div class="line">        <span class="comment">// заменяем все найденные фрагменты покрашенными в красный и выводим эту строку</span></div><div class="line">        <span class="built_in">console</span>.log(line.replace(searchExpr, colors.red(<span class="string">'$1'</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Строчка <code>#!/usr/bin/env node</code> обязательна даже для программы под Windows.
Что бы протестировать программу перед публикацией, создадим файл <code>test.txt</code>:
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">test test test data</div><div class="line">data</div><div class="line">command</div><div class="line">line</div><div class="line">gerp</div></pre></td></tr></table></figure></p>
<p>и выполним команду на Linux:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">cat test.txt|node index .e</div></pre></td></tr></table></figure></p>
<p>на Windows:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">type</span> test.txt|node index .e</div></pre></td></tr></table></figure></p>
<p>Должен получиться следующий результат
<a href="https://potofcode.com/2016/08/21/hello-world-npm/result.png" target="_blank"><img src="https://potofcode.com/2016/08/21/hello-world-npm/result.png" alt="result.png" title=""></a></p>
<p>теперь можно публиковать наш модуль командой, предварительно создав аккаунт на (npmjs.org)[<a href="https://npmjs.org" target="_blank" rel="external">https://npmjs.org</a>] и изменив
название модуля в файле <code>package.json</code> секция <code>name</code>, т.к. это название уже занято =)
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm run patch-release</div></pre></td></tr></table></figure></p>
<p>и спустя некоторое время, после первой публикации, когда модуль пройдет модерацию, его можно будет установить
командой
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm i -g gerp</div></pre></td></tr></table></figure></p>
<p>и использовать из командной строки для поиска текста.</p>
]]></content>
    
    <summary type="html">
    
      Hello World. Описание основных возможностей менеджера модулей NPM для node js и пример как создать свой NPM модуль
    
    </summary>
    
      <category term="Уроки" scheme="https://potofcode.com/categories/%D1%83%D1%80%D0%BE%D0%BA%D0%B8/"/>
    
    
      <category term="javascript" scheme="https://potofcode.com/tags/javascript/"/>
    
      <category term="node js" scheme="https://potofcode.com/tags/node-js/"/>
    
      <category term="hello world" scheme="https://potofcode.com/tags/hello-world/"/>
    
      <category term="npm" scheme="https://potofcode.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>React Snippets компоненты If, EventListener, Composer, Sequencer</title>
    <link href="https://potofcode.com/2016/08/19/javascript-react-snippets/"/>
    <id>https://potofcode.com/2016/08/19/javascript-react-snippets/</id>
    <published>2016-08-20T02:15:58.000Z</published>
    <updated>2016-10-20T22:54:54.113Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p>В этой статье я расскажу как написать следующие компонеты:</p>
<ul>
<li>If - условная отрисовка компонентов</li>
<li>EventListener - компонент слушающий события</li>
<li>Composer - компонент ожидающий параллельного выполнения функций возвращающих Promise</li>
<li>Sequencer - компонент ожидающий последовательного выполнения функций возвращающих Promise</li>
</ul>
<a id="more"></a>
<p>Если лень читать, идите сразу на <a href="https://github.com/3axap4eHko/react-snippets" target="_blank" rel="external">GitHub</a> смотреть примеры - разбираться.</p>
<p>Очень часто возникают ситуации условного отрисовывания того или инного <code>jsx</code> фрагмента, на сайте ReactJS разработчики рекомендуют
использовать тернарные операторы. Для простых конструкций они вполне себе хороши, но вод в сложных приложениях начинается тернарный Ад из операторов.</p>
<h1 id="If"><a href="#If" class="headerlink" title="If"></a>If</h1><p>Что вообще не так с <code>&lt;If/&gt;</code> ? Например создадим следующие компоненты:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> C = React.createClass(&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;name&#125; = <span class="keyword">this</span>.props;</div><div class="line">        alert(name);</div><div class="line">        <span class="keyword">return</span> &lt;div/&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> If = React.createClass(&#123;</div><div class="line">    <span class="attr">propTypes</span>: &#123;</div><div class="line">        <span class="attr">is</span>: React.PropTypes.any.isRequired</div><div class="line">    &#125;,</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;is, children&#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">if</span> (is) &#123;</div><div class="line">            <span class="keyword">return</span> children;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> &lt;div /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Понятно, что при отрисовки компонента <code>&lt;C /&gt;</code> получим сообщениее об имени компонента. Теперь рассмотрим следующий <code>jsx</code> фрагмент:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;If is=&#123;condition&#125; &gt;</div><div class="line">    &lt;C name="1" /&gt;</div><div class="line">&lt;/If&gt;</div></pre></td></tr></table></figure></p>
<p>Вне зависимости от значения <code>condition</code> мы будем видеть сообщение 1. Почему так происаходит?
Дело в том что <code>jsx</code> всегда отрисовывает дочерние компоненты в независимости будут они включены в родительский или нет.
На помощь здесь придут функции, если поместить <code>jsx</code> фрагмент в функцию, то он будет отрисован только в случае вызова этой функции:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> If = React.createClass(&#123;</div><div class="line">    <span class="attr">propTypes</span>: &#123;</div><div class="line">        <span class="attr">is</span>: React.PropTypes.any.isRequired,</div><div class="line">        <span class="attr">render</span>: React.PropTypes.func.isRequired</div><div class="line">    &#125;,</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;is, render&#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">if</span> (is) &#123;</div><div class="line">            <span class="keyword">return</span> render();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> &lt;div /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Тепер на фрагмент примет вид:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;If is=&#123;condition&#125;</div><div class="line">    render=&#123; () =&gt;  &lt;C name="1" /&gt; &#125;</div><div class="line"> /&gt;</div></pre></td></tr></table></figure></p>
<h1 id="EventListener"><a href="#EventListener" class="headerlink" title="EventListener"></a>EventListener</h1><p>Следующим монстром в <code>jsx</code> стали события, например, когда нужно отловить клик глобально, а не в каком нибудь компоненте.
В данном случае создадим компонент <code>ElementEventListener</code>. Суть его в том, что бы не работать напрямую с <code>addEventListener</code>, <code>removeEventListener</code>, а делегировать
эту задачу компоненту <code>React JS</code>. Когда компонент монтируется, он подпишется на событие и когда размонтируется он от него отпишется. Во время события, мы проверим,
совпадает ли селектор нашего <code>ElementEventListener</code> c элементом события, и если да, мы вызовем функцию:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> ElementEventListener = React.createClass(&#123;</div><div class="line">    <span class="attr">propTypes</span>: &#123;</div><div class="line">        <span class="attr">on</span>: func.isRequired,</div><div class="line">        <span class="attr">name</span>: string.isRequired,</div><div class="line">        <span class="attr">target</span>: string</div><div class="line">    &#125;,</div><div class="line">    listener(event) &#123;</div><div class="line">        <span class="keyword">const</span> &#123;target, on&#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">if</span> (!target || event.target.matches(target)) &#123;</div><div class="line">            event.preventDefault();</div><div class="line">            on(event);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    componentWillMount() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;name&#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="built_in">document</span>.addEventListener(name, <span class="keyword">this</span>.listener, <span class="literal">true</span>);</div><div class="line">    &#125;,</div><div class="line">    componentWillUnmount() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;name&#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="built_in">document</span>.addEventListener(name, <span class="keyword">this</span>.listener, <span class="literal">true</span>);</div><div class="line">    &#125;,</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;div/&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Пример использования:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;ElementEventListener</div><div class="line">     name=<span class="string">"click"</span></div><div class="line">     on=&#123; () =&gt; alert(<span class="string">'Click happens!'</span>) &#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>или
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;ElementEventListener</div><div class="line">     name=<span class="string">"click"</span></div><div class="line">     target=<span class="string">"button#clickMe"</span></div><div class="line">     on=&#123; () =&gt; alert(<span class="string">'Click happens!'</span>) &#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h1 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h1><p>Иначе говоря компоновщик. Иногда бывает крайне необходимо подготовить данные перед отрисовкой компонента,
например выполнить несколько запросов на сервер и обработать их и все это асинхронно, либо в связке с <code>Redux</code> необходимо предварительно выполнить
несколько экшенов до отрисовки. Для таких целей, очень хорошо подходит компоновщик. Он одновременно выполнит все переданные ему функции
и дождется пока все они завершатся, а затем отрисует необходимый фрагмент. В основе его будет лежать компонент <code>&lt;If /&gt;</code>,
который мы уже рассмотрели выше:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> If <span class="keyword">from</span> <span class="string">'./If'</span>;</div><div class="line"><span class="keyword">const</span> &#123; func, arrayOf &#125; = PropTypes;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Composer = React.createClass( &#123;</div><div class="line">    <span class="attr">propTypes</span>: &#123;</div><div class="line">        <span class="attr">actions</span>: arrayOf( func ).isRequired,</div><div class="line">        <span class="attr">render</span>: func.isRequired</div><div class="line">    &#125;,</div><div class="line">    getInitialState() &#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">completed</span>: <span class="literal">false</span> &#125;;</div><div class="line">    &#125;,</div><div class="line">    componentWillMount() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; actions &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="built_in">Promise</span>.all( actions.map( <span class="function"><span class="params">action</span> =&gt;</span> action() ) ).then( <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState( &#123; <span class="attr">completed</span>: <span class="literal">false</span> &#125; ) );</div><div class="line">    &#125;,</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; completed &#125; = <span class="keyword">this</span>.state;</div><div class="line">        <span class="keyword">const</span> &#123; render &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">return</span> &lt;If is=&#123;completed&#125; render=&#123;render&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125; );</div></pre></td></tr></table></figure>
<p>Пример использования:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> Composer <span class="keyword">from</span> <span class="string">'./Composer'</span>;</div><div class="line"><span class="keyword">import</span> Page <span class="keyword">from</span> <span class="string">'./Page'</span>;</div><div class="line"><span class="keyword">import</span> &#123;friendsLoadAction, messagesLoadAction&#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> App = React.createClass(&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; friendsLoadAction, messagesLoadAction, friends, messages &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">return</span> &lt;Composer</div><div class="line">                    actions=&#123;[friendsLoadAction, messagesLoadAction]&#125;</div><div class="line">                    render=&#123; () =&gt; &lt;Page friends=&#123;friends&#125; message=&#123;messages&#125; /&gt; &#125;</div><div class="line">               /&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">function mapStateToProps(&#123;friends, messages&#125;) &#123;</div><div class="line">    return &#123;friends, messages&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const mapDispatchToProps = &#123;</div><div class="line">    friendsLoadAction,</div><div class="line">    messagesLoadAction</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default connect(mapStateToProps, mapDispatchToProps)(App);</div></pre></td></tr></table></figure></p>
<h1 id="Sequencer"><a href="#Sequencer" class="headerlink" title="Sequencer"></a>Sequencer</h1><p>Все бы было здорово с компоновщиком, если бы не вопрос, в какой последовательности выполнить функции. Например, в связке
с <code>Redux</code> вы выполняете загрузку конфигурации, а затем, в соответствии с конфигурацией, догружаете необходимые данные.
Здесь нужно выполнить действия последовательно, для этого и подойдет <code>Sequencer</code>.
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> If <span class="keyword">from</span> <span class="string">'./If'</span>;</div><div class="line"><span class="keyword">const</span> &#123; func, arrayOf &#125; = PropTypes;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sequencer</span>(<span class="params">actions</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( !actions.length ) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve( <span class="literal">true</span> );</div><div class="line">    <span class="keyword">const</span> fn = actions.shift();</div><div class="line">    <span class="keyword">return</span> fn().then( <span class="function"><span class="params">()</span> =&gt;</span> _sequencer( actions ) );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Sequencer = React.createClass( &#123;</div><div class="line">    <span class="attr">propTypes</span>: &#123;</div><div class="line">        <span class="attr">actions</span>: arrayOf( func ).isRequired,</div><div class="line">        <span class="attr">render</span>: func.isRequired</div><div class="line">    &#125;,</div><div class="line">    getInitialState() &#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">completed</span>: <span class="literal">false</span> &#125;;</div><div class="line">    &#125;,</div><div class="line">    componentWillMount() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; actions &#125; = <span class="keyword">this</span>.props;</div><div class="line">        _sequencer( actions ).then( <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState( &#123; <span class="attr">completed</span>: <span class="literal">false</span> &#125; ) )</div><div class="line">    &#125;,</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123;completed&#125; = <span class="keyword">this</span>.state;</div><div class="line">        <span class="keyword">const</span> &#123;render&#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">return</span> &lt;If is=&#123;completed&#125; render=&#123;render&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125; );</div><div class="line"></div><div class="line">export default Sequencer;</div></pre></td></tr></table></figure></p>
<p>Пример использования:
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> Composer <span class="keyword">from</span> <span class="string">'./Composer'</span>;</div><div class="line"><span class="keyword">import</span> Page <span class="keyword">from</span> <span class="string">'./Page'</span>;</div><div class="line"><span class="keyword">import</span> &#123;configLoadAction, userDataLoadAction&#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> App = React.createClass(&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">const</span> &#123; configLoadAction, userDataLoadAction, config, userData &#125; = <span class="keyword">this</span>.props;</div><div class="line">        <span class="keyword">return</span> &lt;Sequencer</div><div class="line">                    actions=&#123;[configLoadAction, userDataLoadAction]&#125;</div><div class="line">                    render=&#123; () =&gt; &lt;Page config=&#123;config&#125; userData=&#123;userData&#125; /&gt; &#125;</div><div class="line">               /&gt;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">function mapStateToProps(&#123;config, userData&#125;) &#123;</div><div class="line">    return &#123;config, userData&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const mapDispatchToProps = &#123;</div><div class="line">    configLoadAction,</div><div class="line">    userDataLoadAction</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default connect(mapStateToProps, mapDispatchToProps)(App);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      JavaScript. В статье рассмотрим как написать для React JS - условный оператор If, слушатель событий EventListener, параллельное и последовательное выполнение функций Composer и Sequencer
    
    </summary>
    
      <category term="Статьи" scheme="https://potofcode.com/categories/%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8/"/>
    
    
      <category term="javascript" scheme="https://potofcode.com/tags/javascript/"/>
    
      <category term="react" scheme="https://potofcode.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Введение в программирование. Система счисления, биты и байты</title>
    <link href="https://potofcode.com/2016/08/15/learn-programming-intro-numeral-systems/"/>
    <id>https://potofcode.com/2016/08/15/learn-programming-intro-numeral-systems/</id>
    <published>2016-08-16T03:13:34.000Z</published>
    <updated>2016-08-17T03:24:36.917Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<blockquote>
<p>Существуют 10 типов людей - те кто понимает двоичную систему счисления и те кто не понимает</p>
</blockquote>
<p>В этой статье я доступно опишу с примерами, что такое системы счисления, какие они бывают, перевод чисел между ними, а затем рассмотрим понятия бита и байта.
<a id="more"></a></p>
<p> Цифры - это система символов для представления чисел, в виде их последовательности. Например используя символы 0 и 1 можно записать числа: 10, 100, 11, 101 и т.д.</p>
<p> В повседневной жизни мы используем десять цифр: 0,1,2,3,4,5,6,7,8,9. Совокупность цифр представляет собой систему счисления, которую называют в соответствии с количеством цифр
 в этой системе. В данном случае мы используем <strong>десятичную</strong> систему счисления, т.к. у нас всего 10 цифр.</p>
<p> Так как цифра это символ, то вполне можно представить себе систему в виде букв, например: A,B,C,D,E. Это будет <strong>пятиричная</strong> система счисления, т.к. в ней всего пять символов.
 Или к примеру, если мы добавим к десятичной системе еще 6 знаков, например буквы латинского алфавита: A,B,C,D,E,F то получим, всем известную, шестнадцатеричную систему счисления.
 А сократив количество цифр до восьми - восьмеричную, а до двух - двоичную.</p>
<p> Что бы понять как в них считать, давайте вспомним обычные часы со стрелками. Секундная и минутная стрелки, принимают значения от 0 до 59. Каждый круг секундной стрелки сдвигает
 минутную на одно деление вперед. А теперь представьте, что секунд не 60, а всего лишь 10, т.е. полный круг совершается за 10 секунд.
 <a href="https://potofcode.com/2016/08/15/learn-programming-intro-numeral-systems/10-clock.png" target="_blank"><img src="https://potofcode.com/2016/08/15/learn-programming-intro-numeral-systems/10-clock.png" alt="10-clock.png" title=""></a>
 Очевидно, что это напоминает обычный счет:</p>
<ul>
<li>0:0 = 0</li>
<li>0:1 = 1</li>
<li>0:2 = 2</li>
<li>0:3 = 3</li>
<li>0:4 = 4</li>
<li>0:5 = 5</li>
<li>0:6 = 6</li>
<li>0:7 = 7</li>
<li>0:8 = 8</li>
<li>0:9 = 9</li>
<li>1:0 = 10</li>
<li>1:1 = 11</li>
</ul>
<p> Также очевидно, чтобы считать сотни, нам понадобится еще одна стрелка, которая будет увеличиваться за один круг минутной. Такие часы вполне могут существовать, например на Сатурне,
 период вращения, которого, вокруг своей оси составляет 10.35 часа, другими словами, это сутки на Сатурне. А вот так выглядят часы Нептуна, там сутки 16.11 часа:
 <a href="https://potofcode.com/2016/08/15/learn-programming-intro-numeral-systems/16-clock.png" target="_blank"><img src="https://potofcode.com/2016/08/15/learn-programming-intro-numeral-systems/16-clock.png" alt="16-clock.png" title=""></a></p>
<p> Сейчас они показывают 1 час F минут, что в десятичном виде будет 1:15, а так как в этих часах 1 час равен 16 минутам, то получаем <code>1 x 16 + 15 = 31</code>. Вот так вот незаметно, мы сейчас
 перевели число из шестнадцатиричной системы в десятичную. Для более простого перевода, можно воспользоваться следующей таблицей:</p>
<table class="table table-bordered">
    <thead>
        <tr>
            <td>Множитель</td>
            <td>65 536</td>
            <td>4 096</td>
            <td>256</td>
            <td>16</td>
            <td>1</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Множитель</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>1</td>
            <td>15</td>
        </tr>
        <tr>
            <td>Результат</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>16</td>
            <td>15</td>
        </tr>
    </tbody>
</table>

<p>Просто записываем числа в десятичном виде во вторую строку, затем перемножаем колонки и записываем резуьтат в третью строку, которую нужно просуммировать и получить число в десятичной системе счисления.</p>
<p>Возможно вы заметели, что первая строка таблицы, это степени основания системы счисления записанные справа налево по убыванию.</p>
<ul>
<li>16<sup>5</sup> = 65 536</li>
<li>16<sup>3</sup> = 4 096</li>
<li>16<sup>2</sup> = 256</li>
<li>16<sup>1</sup> = 16</li>
<li>16<sup>0</sup> = 1</li>
</ul>
<p>Таким образом можно составить таблицу для любой системы счисления, заполнив первую строку степенями основания.</p>
<p> А как же быть с двоичной системой? К сожалению, двоичными часами пользоваться не очень удобно:
 <a href="https://potofcode.com/2016/08/15/learn-programming-intro-numeral-systems/2-clock.png" target="_blank"><img src="https://potofcode.com/2016/08/15/learn-programming-intro-numeral-systems/2-clock.png" alt="2-clock.png" title=""></a></p>
<p>Но таблица здесь работает также хорошо:</p>
<table class="table table-bordered">
    <thead>
        <tr>
            <td>Множитель</td>
            <td>2<sup>7</sup> = 128</td>
            <td>2<sup>6</sup> = 64</td>
            <td>2<sup>5</sup> = 32</td>
            <td>2<sup>4</sup> = 16</td>
            <td>2<sup>3</sup> = 8</td>
            <td>2<sup>2</sup> = 4</td>
            <td>2<sup>1</sup> = 2</td>
            <td>2<sup>0</sup> = 1</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Множитель</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>1</td>
            <td>0</td>
        </tr>
        <tr>
            <td>Результат</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>0</td>
            <td>2</td>
            <td>0</td>
        </tr>
    </tbody>
</table>

<p>Эта таблица переводит восьмисимвольное двоичное число в десятичное, такое восьмисимвольное число, еще называют октет или байт, а символы этого числа - битами, которые могут
 принимать значения лишь 0 и 1. Как легко заметить максимально возможное значение одного байта 255:
 <table class="table table-bordered">
     <thead>
         <tr>
             <td>Множитель</td>
             <td>2<sup>7</sup> = 128</td>
             <td>2<sup>6</sup> = 64</td>
             <td>2<sup>5</sup> = 32</td>
             <td>2<sup>4</sup> = 16</td>
             <td>2<sup>3</sup> = 8</td>
             <td>2<sup>2</sup> = 4</td>
             <td>2<sup>1</sup> = 2</td>
             <td>2<sup>0</sup> = 1</td>
         </tr>
     </thead>
     <tbody>
         <tr>
             <td>Множитель</td>
             <td>1</td>
             <td>1</td>
             <td>1</td>
             <td>1</td>
             <td>1</td>
             <td>1</td>
             <td>1</td>
             <td>1</td>
         </tr>
         <tr>
             <td>Результат</td>
             <td>128</td>
             <td>64</td>
             <td>32</td>
             <td>16</td>
             <td>8</td>
             <td>4</td>
             <td>2</td>
             <td>1</td>
         </tr>
     </tbody>
 </table>
 Откуда получаем <code>128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = 255</code>, что умещается ровно в две первые колнки шестнадцатиричной таблицы в виде числа FF, т.е. 15 15:</p>
<p><table class="table table-bordered">
 <thead>
     <tr>
         <td>Множитель</td>
         <td>16</td>
         <td>1</td>
     </tr>
 </thead>
 <tbody>
     <tr>
         <td>Множитель</td>
         <td>15</td>
         <td>15</td>
     </tr>
     <tr>
         <td>Результат</td>
         <td>240</td>
         <td>15</td>
     </tr>
 </tbody>
</table>
 Суммируя результат, которой, получаем <code>240 + 15 = 255</code>. Откуда очевидно следующие равенство, что  <code>FF = 11111111 = 255</code>. Для того, что бы не путаться между системами счисления,
 например число <code>11111111</code> вполне похоже на 11 миллионов, перед числом ставят специальный префикс:</p>
<ul>
<li><code>0x</code> - для шестнадцатиричных ( hex )</li>
<li><code>0o</code> - для восьмиричных ( o - octet )</li>
<li><code>0b</code> - для двоичных ( b - binary )</li>
</ul>
<p>Согласно этому правилу, наши числа примут вид <code>0xFF</code> и <code>0b11111111</code>.</p>
]]></content>
    
    <summary type="html">
    
      Введение в программирование. Что такое система счисления, перевод между системами и понятие бита и байта
    
    </summary>
    
      <category term="Уроки" scheme="https://potofcode.com/categories/%D1%83%D1%80%D0%BE%D0%BA%D0%B8/"/>
    
    
      <category term="программирование" scheme="https://potofcode.com/tags/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"/>
    
  </entry>
  
  <entry>
    <title>Простое современное MVC приложение на Node JS</title>
    <link href="https://potofcode.com/2016/04/08/article-node-simple-mvc-app/"/>
    <id>https://potofcode.com/2016/04/08/article-node-simple-mvc-app/</id>
    <published>2016-04-08T20:28:34.000Z</published>
    <updated>2016-10-03T22:27:47.004Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p> В этой статье я расскажу как написать простейшее приложение на Node JS используя современные технологиии разработки.
<a id="more"></a></p>
<h3 id="Подготовка"><a href="#Подготовка" class="headerlink" title="Подготовка"></a><strong>Подготовка</strong></h3><p>Для тех кому лень читать, исходный код расположен <a href="https://github.com/3axap4eHko/simple-node-mvc-app" target="_blank" rel="external">здесь</a>.
Если у вас не установлен <code>Node JS</code>, <a href="https://nodejs.org/en/" target="_blank" rel="external">необходимо скачать и установить</a>. Откроем коммандную строку и создадим директорию для нашего сайта:
<figure class="highlight bat"><table><tr><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> simple-node-site &amp;&amp; <span class="built_in">cd</span> simple-node-site</div><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>В процессе инициализации <code>npm</code> запросит некоторую информацию.
Далее установим пакеты:</p>
<ul>
<li><code>express</code> - минималистичный веб фреймфорк для Node JS</li>
<li><code>morgan</code> - Http логгер для Node</li>
<li><code>jade</code> - шаблонизатор (в данный момент он переименован в <code>Pug</code>)</li>
<li><code>stylus</code> - CSS препроцессор</li>
<li><code>yamljs</code> - YAML парсер для хранения конфигурации</li>
<li><code>nodemon</code> - пакет для мониторинга и автоматической перезагрузки исходного кода</li>
</ul>
<p>Для этого выполним в той же коммандной строке:
<figure class="highlight bat"><table><tr><td class="code"><pre><div class="line">npm i --save express morgan jade yamljs</div><div class="line">npm i -g nodemon stylus</div></pre></td></tr></table></figure></p>
<p>и создадим файл <code>nodemon.json</code> со следующим содержимым:
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"verbose"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"ignore"</span>: [</div><div class="line">    <span class="string">".git"</span>,</div><div class="line">    <span class="string">"node_modules/**/node_modules"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"execMap"</span>: &#123;</div><div class="line">    <span class="attr">"js"</span>: <span class="string">"node --harmony"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"watch"</span>: [</div><div class="line">    <span class="string">"src/"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"ext"</span>: <span class="string">"js json"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Теперь добавим в секцию <code>scripts</code> файла <code>package.json</code> следующие строки:
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">"scripts" : &#123;</div><div class="line">    ...</div><div class="line">    "build": "stylus src/styles/index.styl -o public/css",</div><div class="line">    "watch": "stylus -w src/css/index.styl -o public/css -c &amp;&amp; nodemon app.js",</div><div class="line">    "start": "node app.js"</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Сервер"><a href="#Сервер" class="headerlink" title="Сервер"></a><strong>Сервер</strong></h3><p>В качестве основной страницы будим использовать пример из Bootstrap. Структура веб-приложения будет следующая:
<figure class="highlight bat"><table><tr><td class="code"><pre><div class="line">├───controllers</div><div class="line">├───styles</div><div class="line">├───views</div><div class="line">└───config.yml</div></pre></td></tr></table></figure></p>
<p>Создади конфигурационыый файл <code>src/config.yml</code>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">scope:</span></div><div class="line"><span class="attr">  title:</span> <span class="string">"Hello World!"</span></div><div class="line"><span class="attr">  author:</span> <span class="string">"Ivan Zaharchenko"</span></div><div class="line"></div><div class="line"><span class="attr">routes:</span></div><div class="line"><span class="attr">  home:</span>  <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">"/"</span><span class="string">,</span> <span class="attr">controller:</span> <span class="string">"index"</span> <span class="string">&#125;</span></div><div class="line"><span class="attr">  about:</span> <span class="string">&#123;</span> <span class="attr">path:</span> <span class="string">"/about"</span><span class="string">,</span> <span class="attr">controller:</span> <span class="string">"about"</span> <span class="string">&#125;</span></div></pre></td></tr></table></figure></p>
<p>В нем прописаны значения переменных для сайта и маршрутизация. Теперь создадим контроллеры:
<code>src/controllers/index.js</code>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res(&#123; <span class="attr">message</span>: <span class="string">'Hello World!'</span>&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>src/controllers/about.js</code>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Первый контроллер будет передавать сообщение во view, а второй будет просто его рендерить.
Теперь добавим view в наше приложение. Для этого создадим <code>src/views/layout.jade</code> файл:
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">doctype html</div><div class="line">html</div><div class="line">  head</div><div class="line">    title= title</div><div class="line">    meta(name=&quot;author&quot;, content=author)</div><div class="line">    link(rel=&quot;stylesheet&quot;,href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&quot;)</div><div class="line">    link(rel=&quot;stylesheet&quot;,href=&quot;/css/index.css&quot;)</div><div class="line">  body</div><div class="line">    nav.navbar.navbar-inverse.navbar-fixed-top</div><div class="line">      .container</div><div class="line">        .navbar-header</div><div class="line">          button.navbar-toggle.collapsed(type=&apos;button&apos;, data-toggle=&apos;collapse&apos;, data-target=&apos;#navbar&apos;, aria-expanded=&apos;false&apos;, aria-controls=&apos;navbar&apos;)</div><div class="line">            span.sr-only Toggle navigation</div><div class="line">            span.icon-bar</div><div class="line">            span.icon-bar</div><div class="line">            span.icon-bar</div><div class="line">          a.navbar-brand(href=&apos;/&apos;) Hello World App</div><div class="line">        #navbar.collapse.navbar-collapse</div><div class="line">          ul.nav.navbar-nav</div><div class="line">            li</div><div class="line">              a(href=&apos;/&apos;) Home</div><div class="line">            li</div><div class="line">              a(href=&apos;/about&apos;) About</div><div class="line">    .container</div><div class="line">      block content</div></pre></td></tr></table></figure></p>
<p>Это будет базовый слой, от которого наследуются другие view. Теперь добавим <code>src/views/index.jade</code>, который будет отображать главную страницу:
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">extends ./layout.jade</div><div class="line"></div><div class="line">block content</div><div class="line">  .starter-template</div><div class="line">    h1= message</div><div class="line">    p.lead</div><div class="line">      | Use this document as a way to quickly start any new project.</div><div class="line">      br</div><div class="line">      |  All you get is this text and a mostly barebones HTML document.</div></pre></td></tr></table></figure></p>
<p>И <code>src/views/about.jade</code>, который будет отображать страницу <code>about</code>:
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">extends ./layout.jade</div><div class="line"></div><div class="line">block content</div><div class="line">  .starter-template</div><div class="line">    h1 About page</div></pre></td></tr></table></figure></p>
<p>Как видите, оба view наследуются от базового <code>layout.jade</code>.
Теперь создадим простой стиль для нашего приложения. Для этого добавим файл <code>src/styles/index.styl</code> со следующим содержимым:
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">padding-top</span>: <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.starter-template</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">15px</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Затем создадим файл <code>app.js</code>, это и будет http сервер, который обрабатывает запросы:
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Подключаем необходимые модули</span></div><div class="line"><span class="keyword">const</span> Http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> Path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> Yaml = <span class="built_in">require</span>(<span class="string">'yamljs'</span>);</div><div class="line"><span class="keyword">const</span> Express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">const</span> Logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</div><div class="line"><span class="comment">// Создаем Express приложение</span></div><div class="line"><span class="keyword">const</span> app = Express();</div><div class="line"><span class="comment">// Загружаем конфигурационный файл</span></div><div class="line"><span class="keyword">const</span> config = Yaml.load(Path.join(__dirname, <span class="string">'src/config.yml'</span>));</div><div class="line"><span class="comment">// Устанавливаем шаблонизатор Jade</span></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</div><div class="line"><span class="comment">// Указываем где располагаются шаблоны</span></div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'./src/views'</span>);</div><div class="line"><span class="comment">// Подключаем логер http запросов</span></div><div class="line">app.use(Logger(<span class="string">'dev'</span>));</div><div class="line"><span class="comment">// Указываем public директорию, где будут храниться статические файлы</span></div><div class="line">app.use(Express.static(__dirname + <span class="string">'/public'</span>));</div><div class="line"></div><div class="line"><span class="comment">// Эта функция будет рендерить шаблон передавая в него аргументы</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">response</span> (<span class="params">res, template, locals</span>) </span>&#123;</div><div class="line">    locals = <span class="built_in">Object</span>.assign(&#123;&#125;, config.scope, locals || &#123;&#125;);</div><div class="line">    res.render(template, locals);</div><div class="line">&#125;</div><div class="line"><span class="comment">// Настраиваем маршрутизацию из конфигурационного файла</span></div><div class="line"><span class="built_in">Object</span>.keys(config.routes).forEach( <span class="function"><span class="params">routeName</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> route = config.routes[routeName];</div><div class="line">    <span class="keyword">let</span> controller = <span class="built_in">require</span>(Path.join(__dirname, <span class="string">'src/controllers'</span>, route.controller));</div><div class="line">    <span class="keyword">let</span> method = (route.method || <span class="string">'get'</span>).toUpperCase();</div><div class="line">    <span class="comment">// Проверяем валидность HTTP метода</span></div><div class="line">    <span class="keyword">if</span> (~Http.METHODS.indexOf(method)) &#123;</div><div class="line">        <span class="comment">// Привязываем контроллер к маршруту</span></div><div class="line">        app[method.toLowerCase()](route.path, (req, res, next) =&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">// передаем переменую запроса, функцию рендеринга и функцию пропуска в контроллер</span></div><div class="line">                controller(req, response.bind(<span class="literal">null</span>, res, route.view || route.controller), next);</div><div class="line">            &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">                next(e);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// Слушаем указаный порт или порт по-умолчанию</span></div><div class="line">app.listen(process.env.PORT || <span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Listening on http://localhost:'</span> + (process.env.PORT || <span class="number">3000</span>))</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="Разработка-сборка-и-запуск"><a href="#Разработка-сборка-и-запуск" class="headerlink" title="Разработка, сборка и запуск"></a><strong>Разработка, сборка и запуск</strong></h3><p>Во время разработки, лучше использовать команду
<figure class="highlight bat"><table><tr><td class="code"><pre><div class="line">npm run watch</div></pre></td></tr></table></figure></p>
<p>в этом режиме, сервер будет автоматически перезагружать скрипты, после их изменения и пересобирать стили. Для сборки стилей можно использовать команду:
<figure class="highlight bat"><table><tr><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure></p>
<p>стили будут пересобраны в директорию <code>public/css</code>.
Что бы запустить приложение, нужно выполнить команду
<figure class="highlight bat"><table><tr><td class="code"><pre><div class="line">npm run <span class="built_in">start</span></div></pre></td></tr></table></figure></p>
<p>После этой команды, приложение будет слушать указанный порт и отвечать на HTTP запросы.</p>
<h3 id="Рекомендации"><a href="#Рекомендации" class="headerlink" title="Рекомендации"></a><strong>Рекомендации</strong></h3><p>Для того, что бы разгрузить наше приложение, я рекомендую избавиться от строчки
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.use(Express.static(__dirname + <span class="string">'/public'</span>));</div></pre></td></tr></table></figure></p>
<p>и проксировать запросы к статике через веб сервер, например <a href="http://nginx.org/" target="_blank" rel="external">nginx</a>, так же через него можно настроить и кеширование самого приложения.</p>
]]></content>
    
    <summary type="html">
    
      Как создать простое современное MVC приложение на Node JS с помощью Express, Jade, Stylus
    
    </summary>
    
      <category term="Статьи" scheme="https://potofcode.com/categories/%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8/"/>
    
    
      <category term="программирование" scheme="https://potofcode.com/tags/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"/>
    
      <category term="javascript" scheme="https://potofcode.com/tags/javascript/"/>
    
      <category term="node js" scheme="https://potofcode.com/tags/node-js/"/>
    
      <category term="mvc" scheme="https://potofcode.com/tags/mvc/"/>
    
      <category term="express" scheme="https://potofcode.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>Собираем NodeJS с движком Chakra от Microsoft</title>
    <link href="https://potofcode.com/2016/03/14/learn-node-chakracore/"/>
    <id>https://potofcode.com/2016/03/14/learn-node-chakracore/</id>
    <published>2016-03-14T22:46:34.000Z</published>
    <updated>2016-09-06T05:18:37.281Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p> Сегодня мы собирем свой <a href="http://nodejs.org" target="_blank" rel="external">NodeJS</a>, но вместо, пока, стандартного движка <a href="https://ru.wikipedia.org/wiki/V8_(%D0%B4%D0%B2%D0%B8%D0%B6%D0%BE%D0%BA_JavaScript" target="_blank" rel="external">V8</a> в нем будет движок Chakra на котором основан новый браузер Microsoft Edge.
<a id="more"></a>
Зачем это нужно? Что бы сравнить функциональность и производительность движков V8 и Chakra и выбрать то, что лучше, а так же всегда интересно “поковырять” инструмент до релиза, т.к. в NodeJS движок Chakra будет включен с 6-ой версии.</p>
<a href="https://potofcode.com/2016/03/14/learn-node-chakracore/node-schedule.png" target="_blank"><img src="https://potofcode.com/2016/03/14/learn-node-chakracore/node-schedule.png" alt="node-schedule.png" title=""></a>
<p>Для начала нужно убедиться, что у нас уже установлены <a href="https://www.python.org/downloads/" target="_blank" rel="external">Python 2.7</a> и <a href="https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx" target="_blank" rel="external">Visual Studio</a>. Затем получим исходные файлы движка:
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ mkdir node-chakracore</div><div class="line">$ cd node-chakracore</div><div class="line">$ git clone https://github.com/nodejs/node-chakracore.git .</div></pre></td></tr></table></figure></p>
<p>Теперь определяемся с платформой: <code>x86</code>, <code>x64</code> или <code>arm</code> и собираем движок.
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ vcbuild chakracore nosign [x86|x64|arm]</div></pre></td></tr></table></figure></p>
<p>После того, как сборка проекта завершится, NodeJS будет находиться в папке <code>node-chakracore\Release\</code>:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">cctest.exe</div><div class="line">chakracore.dll</div><div class="line">node.exe</div><div class="line">openssl-cli.exe</div></pre></td></tr></table></figure></p>
<p>И наконец проверим версию свежесобранной NodeJS:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ node.exe -v</div><div class="line">v6.0.0-pre</div></pre></td></tr></table></figure></p>
<p>Если просто захотите попробовать, вот ссылка <a href="https://yadi.sk/d/cNI4tmVLqBaNh" target="_blank" rel="external">NodeJS ChakraCore x64</a></p>
]]></content>
    
    <summary type="html">
    
      Собираем NodeJS с движком Chakra на котором основан браузер Microsoft Edge
    
    </summary>
    
      <category term="Уроки" scheme="https://potofcode.com/categories/%D1%83%D1%80%D0%BE%D0%BA%D0%B8/"/>
    
    
      <category term="программирование" scheme="https://potofcode.com/tags/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"/>
    
      <category term="javascript" scheme="https://potofcode.com/tags/javascript/"/>
    
      <category term="node js" scheme="https://potofcode.com/tags/node-js/"/>
    
      <category term="chakracore" scheme="https://potofcode.com/tags/chakracore/"/>
    
  </entry>
  
  <entry>
    <title>Hello World. Node JS</title>
    <link href="https://potofcode.com/2016/03/13/hello-world-node-js/"/>
    <id>https://potofcode.com/2016/03/13/hello-world-node-js/</id>
    <published>2016-03-13T10:09:19.000Z</published>
    <updated>2016-11-04T23:26:30.102Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p> Node.JS - это платформа для выполнения JavaScript основаная на движке V8. В этом уроке мы установим node.js и запустим простой Hello World HTTP сервер.
<a id="more"></a></p>
<h3 id="Установка"><a href="#Установка" class="headerlink" title="Установка"></a>Установка</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>Для установки нужно перейти на сайт <a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs.org</a> скачать и установить.</p>
<blockquote>
<p><strong>Примечание:</strong>
Если вы используете <code>Visual Studio 2015</code>, установите переменную окружения <code>GYP_MSVS_VERSION=2015</code>, что бы собирать модули Node JS с помощью <code>Visual Studio 2015</code></p>
</blockquote>
<h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">curl <span class="_">-s</span>L https://deb.nodesource.com/setup_5.x | sudo -E bash -</div><div class="line">sudo apt-get install -y nodejs</div></pre></td></tr></table></figure>
<h3 id="Проверка"><a href="#Проверка" class="headerlink" title="Проверка"></a>Проверка</h3><p>Вместе с node.js будет установлен менеджер пакетов <code>npm</code>. Что бы проверить версию <code>node</code> и <code>npm</code> введем команды
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<h3 id="Запуск"><a href="#Запуск" class="headerlink" title="Запуск"></a>Запуск</h3><p>На момент написания статьи я использую <code>node</code> версии <code>5.8.0</code>. Давайте запустим простейший http сервер на node.js. Для этого создадим файл <code>server.js</code> со следующим содержимым:
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</div><div class="line"><span class="keyword">const</span> port = <span class="number">1337</span>;</div><div class="line"></div><div class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span> &#125;);</div><div class="line">  res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(port, hostname, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Теперь запустим наш сервер командой:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">node server.js</div></pre></td></tr></table></figure></p>
<p>Перейдя по адресу <a href="http://127.0.0.1:1337" target="_blank" rel="external">127.0.0.1:1337</a> мы увидим сообщение <code>Hello World</code></p>
]]></content>
    
    <summary type="html">
    
      Hello World. Установка и запуск простейшего Hello World приложения на Node JS
    
    </summary>
    
      <category term="Уроки" scheme="https://potofcode.com/categories/%D1%83%D1%80%D0%BE%D0%BA%D0%B8/"/>
    
    
      <category term="программирование" scheme="https://potofcode.com/tags/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/"/>
    
      <category term="javascript" scheme="https://potofcode.com/tags/javascript/"/>
    
      <category term="node js" scheme="https://potofcode.com/tags/node-js/"/>
    
      <category term="hello world" scheme="https://potofcode.com/tags/hello-world/"/>
    
  </entry>
  
  <entry>
    <title>Настраиваем свой Rust сервер</title>
    <link href="https://potofcode.com/2016/03/13/games-build-rust-server/"/>
    <id>https://potofcode.com/2016/03/13/games-build-rust-server/</id>
    <published>2016-03-13T08:25:46.000Z</published>
    <updated>2016-09-02T03:55:42.427Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p> В этом посте я расскажу как установить и настроить свой Rust Server и моды к нему на примере Oxide.Ext.Rustio.
<a id="more"></a>
Сначала утсановим SteamCMD. Для OS Windows <a href="https://steamcdn-a.akamaihd.net/client/installer/steamcmd.zip" target="_blank" rel="external">скачаем</a> архив и распакуем в отдельную папку. Я буду использовать <code>D:\bin\steamcmd</code>.</p>
<blockquote>
<p>Для OS Ubuntu
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get install lib32gcc1</div><div class="line">sudo useradd -m steam</div><div class="line">su - steam</div><div class="line">mkdir ~/steamcmd</div><div class="line"><span class="built_in">cd</span> ~/steamcmd</div><div class="line">wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz</div><div class="line">tar -xvzf steamcmd_linux.tar.gz</div></pre></td></tr></table></figure></p>
</blockquote>
<p>После распаковки запускаем консоль <code>steamcmd</code> и ждем завершения процесса установки. Как только все будет установлено должна открыться консоль</p>
<a href="https://potofcode.com/2016/03/13/games-build-rust-server/steamcmd.png" target="_blank"><img src="https://potofcode.com/2016/03/13/games-build-rust-server/steamcmd.png" alt="steamcmd.png" title=""></a>
<p>Затем необходимо залогиниться и начать процесс установки сервера
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ login anonymous</div><div class="line">$ app_update 258550 -beta experimental validate</div></pre></td></tr></table></figure></p>
<a href="https://potofcode.com/2016/03/13/games-build-rust-server/steamcmd-rust-server.png" target="_blank"><img src="https://potofcode.com/2016/03/13/games-build-rust-server/steamcmd-rust-server.png" alt="steamcmd-rust-server.png" title=""></a>
<p>Из любопытства, со всем списком серверов можно ознакомиться <a href="https://developer.valvesoftware.com/wiki/Dedicated_Servers_List" target="_blank" rel="external">здесь</a>.
 По завершении установки в директории <code>d:\bin\steamcmd\steamapps\common</code> появится папка <code>rust_dedicated</code>.
 В качестве движка для модов я использую <a href="http://oxidemod.org/downloads/oxide-for-rust.1659/" target="_blank" rel="external">oxidemod</a>.
 Готовый движок можно скачать с форума либо собрать из исходников на <a href="https://github.com/OxideMod/Oxide" target="_blank" rel="external">GitHub</a>.</p>
<p>Распаковываем файл Oxide-Rust.zip с заменой в папку с сервером <code>d:\bin\steamcmd\steamapps\common\rust_dedicated\</code>.
Теперь установи несколько плагинов и расширение:</p>
<ul>
<li><a href="http://oxidemod.org/extensions/rust-io.768/" target="_blank" rel="external">Rust:IO</a> - Расширение добавляет карту местности доступную из браузера</li>
<li><a href="http://oxidemod.org/plugins/kits.668/" target="_blank" rel="external">Kits</a> - Добавляет возможность создавать наборы предметов</li>
<li><a href="http://oxidemod.org/plugins/death-notes.819/" target="_blank" rel="external">Death Notes</a> - Сообщает о смертях в мире</li>
<li><a href="http://oxidemod.org/plugins/teleportation-system.660/" target="_blank" rel="external">Teleportation System</a> - Позволяет телепортироваться</li>
<li><a href="http://oxidemod.org/plugins/airdrop-controller.804/" target="_blank" rel="external">Airdrop Controller</a> - Добавляет возможность контролировать Airdrop</li>
<li><a href="http://oxidemod.org/plugins/give.666/" target="_blank" rel="external">Give</a> - Добавляет возможность давать игрокам предметы</li>
</ul>
<p>Чтобы установить и нстроить расширение <code>Rust:IO</code> нужно сохранить файл <code>Oxide.Ext.RustIO.dll</code> в папку <code>rust_dedicated\RustDedicated_Data\Managed\</code>.
Для установки плагинов, нужно скопировать файлы в <code>rust_dedicated\server\facepunchdev\oxide\plugins\</code>
Теперь, чтобы запустить сервер выполним команду
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ RustDedicated.exe -batchmode +server.hostname <span class="string">"hostname"</span> +server.port 28015 +server.identity <span class="string">"server name"</span> +server.seed 6738</div></pre></td></tr></table></figure></p>
<p>Все параметры в таблице:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Parameter</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">server.port</td>
<td style="text-align:left">Порт сервера</td>
</tr>
<tr>
<td style="text-align:left">server.maxplayers</td>
<td style="text-align:left">Максимальное количество игроков на сервере</td>
</tr>
<tr>
<td style="text-align:left">server.hostname</td>
<td style="text-align:left">Адрес сервера</td>
</tr>
<tr>
<td style="text-align:left">server.identity</td>
<td style="text-align:left">Название сервера</td>
</tr>
<tr>
<td style="text-align:left">server.level</td>
<td style="text-align:left">Тип карты “Procedural Map” - процедурная генерация или “TestLevel” - тестовая карта</td>
</tr>
<tr>
<td style="text-align:left">server.seed</td>
<td style="text-align:left">Вектор инициализации генератора карты. Может принять значения от -2,147,483,647 до 2,147,483,647</td>
</tr>
<tr>
<td style="text-align:left">server.saveinterval</td>
<td style="text-align:left">Интервал в секундах между автосохранениями</td>
</tr>
<tr>
<td style="text-align:left">server.secure</td>
<td style="text-align:left">Защита VAC и EAC</td>
</tr>
<tr>
<td style="text-align:left">server.tickrate</td>
<td style="text-align:left">Количество тиков в секунду. Меньше - быстрее но возможны странные вещи. По умолчанию 30</td>
</tr>
<tr>
<td style="text-align:left">construct.frameminutes</td>
<td style="text-align:left">Minutes before a frame is automatically destroyed</td>
</tr>
</tbody>
</table>
<p>Теперь, что бы играть на свеженьком сервере, запускаем клиент жмем F1 вводим <code>net.connect &lt;ip_address&gt;</code></p>
]]></content>
    
    <summary type="html">
    
      Установка и настройка локального игрового Rust сервера. Как настроить Oxide.Ext.Rustio и многое другое.
    
    </summary>
    
      <category term="Игры" scheme="https://potofcode.com/categories/%D0%B8%D0%B3%D1%80%D1%8B/"/>
    
    
      <category term="Games" scheme="https://potofcode.com/tags/games/"/>
    
      <category term="Steam" scheme="https://potofcode.com/tags/steam/"/>
    
      <category term="Rust" scheme="https://potofcode.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Настройка среды разработки. Часть 1</title>
    <link href="https://potofcode.com/2016/03/12/article-build-environment-p1/"/>
    <id>https://potofcode.com/2016/03/12/article-build-environment-p1/</id>
    <published>2016-03-12T22:28:55.000Z</published>
    <updated>2017-02-11T17:57:11.612Z</updated>
    
    <content type="html"><![CDATA[<p>Ave $USER!</p>
<p> Споры между разработчиками под Windows и Linux длятся с давних пор и можно приводить множество доводов в пользу обеих платформ. Прочитать их сравнение можно здесь <a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%80%D0%B0%D0%B2%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5_Microsoft_Windows_%D0%B8_Linux" target="_blank" rel="external">Сравнение Window и Linux</a>. Т.к. часто приходится разрабатывать под обе, то вместо того, чтобы выбирать платформу, возьмем лучшее из обеих.
<a id="more"></a>
Графическая оболочка Windows и огромный выбор инструментов с графическим интерфейсов, составляют преимущество этой платформы. В то же время, платформа Linux это уже очень мощный инструмент разработки.
Для начала расскажу немного о рекомендуемой структуре. Я предпочитаю систему из 2-х дисков, первый - системный и второй - рабочий. Структура рабочего диска следующая:
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">D:.</div><div class="line">├───bin         // Программы и утилиты для разработки</div><div class="line">│  ├───arduino</div><div class="line">│  ├───git</div><div class="line">│  ├───nginx</div><div class="line">│  ├───node</div><div class="line">│  ├───putty</div><div class="line">│  └───python</div><div class="line">├───games       // Да, я играю в игры =)</div><div class="line">├───projects    // Проекты</div><div class="line">├───tmp         // Временная папка</div><div class="line">└───usr         // для документов и прочих файлов</div></pre></td></tr></table></figure></p>
<p>Теперь мы создадим виртуальную машину на базе Hyper-V, т.к. она уже поставляется в комплекте с Windows версии 8+, интегрирована в саму платформу и поддерживается как средствами разработки Microsoft так и сторонними.
На виртуальную машину установим OS <a href="http://www.ubuntu.com/download/server" target="_blank" rel="external">Ubuntu Server</a> и будим ее использовать как платформу для наших приложений. При желании вы можете использовать любую другую серверную OS.
Для начала активируем Hyper-V виртуализатор. Для это откроем меню запуска (Win+R) и вводим команду <code>OptionalFeatures</code>, в окне выбора дополнительных инструментов необходимо отметить пункт <code>Hyper-V</code>.</p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-enabled.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-enabled.png" alt="hyper-v-enabled.png" title=""></a>
<p>Спустя некоторе время установки виртуализатора потребуется перезагрузка. После перезагрузки запускаем <code>Hyper-V Manager</code> (далее <code>HVM</code>).</p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-manager.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-manager.png" alt="hyper-v-manager.png" title=""></a>
<p>В окне <code>HVM</code> нужно создать внутренний виртуальный адаптер (internal virtual switch).</p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-create-adapter.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-create-adapter.png" alt="hyper-v-create-adapter.png" title=""></a>
<p>Внутренний адаптер будет иметь постоянный IP адрес при смене сети (например laptop в другой сети Wi-Fi) в отличии от внешнего, но не будет прямого доступа извне хоста.</p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-config-adapter.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-config-adapter.png" alt="hyper-v-config-adapter.png" title=""></a>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/network-share.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/network-share.png" alt="network-share.png" title=""></a>
<p>Для созданного адаптера разрешаем подключение через основной адаптер</p>
<p>После этого стоит перезагрузить хост еще раз (иногда). Далее создим виртуальную машину - шаги очень просты.</p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-create-vm-name.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-create-vm-name.png" alt="hyper-v-create-vm-name.png" title=""></a>
<p>Указываем созданный виртуальный адаптер в качестве сетевого.</p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-create-vm-network.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/hyper-v-create-vm-network.png" alt="hyper-v-create-vm-network.png" title=""></a>
<p>Затем запускаем виртуальную машину. Процесс установки предельно прост, во время установки необходимо установить OpenSSH server.</p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/ubuntu-install-openssh.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/ubuntu-install-openssh.png" alt="ubuntu-install-openssh.png" title=""></a>
<p>После того как сервер будет установлен, нужно будет установить samba сервер и добавить пользователя
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install samba</div><div class="line">$ sudo smbpasswd <span class="_">-a</span> &lt;user_name&gt;</div></pre></td></tr></table></figure></p>
<p>Теперь можно добавить общую папку и расшарить ее
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ sudo mkdir /home/www</div><div class="line">$ sudo chown &lt;user_name&gt;.&lt;user_group&gt; /home/www</div><div class="line">$ <span class="built_in">cd</span> /etc/samba/</div><div class="line">$ sudo cp smb.conf smb.conf.bak</div><div class="line">$ sudo nano smb.conf</div></pre></td></tr></table></figure></p>
<p>В конце <code>smb.conf</code> файла добавляем следующие строки:
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[www]</div><div class="line">path = /home/www</div><div class="line">valid users = &lt;user_name&gt;</div><div class="line"><span class="built_in">read</span> only = No</div><div class="line">create mask = 0644</div><div class="line">guest ok = Yes</div></pre></td></tr></table></figure></p>
<p>Сохраняем изменения (Ctrl+O) и выходим (Ctrl+X). Перезапускаем samba server.
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ sudo service smbd restart</div></pre></td></tr></table></figure></p>
<p>Проверяем валидность данных
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ testparm</div><div class="line">Load smb config files from /etc/samba/smb.conf</div><div class="line">rlimit_max: increasing rlimit_max (1024) to minimum Windows <span class="built_in">limit</span> (16384)</div><div class="line">Processing section <span class="string">"[printers]"</span></div><div class="line">Processing section <span class="string">"[print$]"</span></div><div class="line">Processing section <span class="string">"[www]"</span></div><div class="line">Loaded services file OK.</div><div class="line">Server role: ROLE_STANDALONE</div><div class="line">Press enter to see a dump of your service definitions</div></pre></td></tr></table></figure></p>
<p>Теперь добавим только что расшаренный сетевой диск к системе. Для этого выполним команду
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ ifconfig</div></pre></td></tr></table></figure></p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/ubuntu-ifconfig.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/ubuntu-ifconfig.png" alt="ubuntu-ifconfig.png" title=""></a>
<p><code>eth0</code> это наш сетевой интерфейс с IP адресом <code>inet addr:192.168.137.63</code>
Теперь откроем проводник и добавим сетевой диск</p>
<a href="https://potofcode.com/2016/03/12/article-build-environment-p1/windows-network-drive.png" target="_blank"><img src="https://potofcode.com/2016/03/12/article-build-environment-p1/windows-network-drive.png" alt="windows-network-drive.png" title=""></a>
<p>Готово, теперь у нас есть 2 платформы с общей папкой для наших приложений.</p>
]]></content>
    
    <summary type="html">
    
      Настройка и интеграция OS Windows и Linux через гипервизор Hyper-V с доступом в интернет
    
    </summary>
    
      <category term="Статьи" scheme="https://potofcode.com/categories/%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8/"/>
    
    
      <category term="windows" scheme="https://potofcode.com/tags/windows/"/>
    
      <category term="linux" scheme="https://potofcode.com/tags/linux/"/>
    
      <category term="среда разработки" scheme="https://potofcode.com/tags/%D1%81%D1%80%D0%B5%D0%B4%D0%B0-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B8/"/>
    
  </entry>
  
</feed>
